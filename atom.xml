<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>_WD_&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-29T16:22:02.410Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>_WD_</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>paper</title>
    <link href="http://example.com/2022/05/30/paper/"/>
    <id>http://example.com/2022/05/30/paper/</id>
    <published>2022-05-29T16:22:02.000Z</published>
    <updated>2022-05-29T16:22:02.410Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>newpapername</title>
    <link href="http://example.com/2022/05/30/newpapername/"/>
    <id>http://example.com/2022/05/30/newpapername/</id>
    <published>2022-05-29T16:15:14.000Z</published>
    <updated>2022-05-29T16:15:27.542Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/P5121/"/>
    <id>http://example.com/2022/05/30/P5121/</id>
    <published>2022-05-29T16:12:37.469Z</published>
    <updated>2022-05-23T15:06:20.058Z</updated>
    
    <content type="html"><![CDATA[<p>[[implementation]]<br><a href="https://www.luogu.com.cn/problem/P5121">link</a></p><pre><code class="hljs">while(还有可以删的连通块)&#123;    找连通块，判断连通块大小，删除或不删；    掉落；&#125;</code></pre><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k,cnt,vis[<span class="hljs-number">111</span>][<span class="hljs-number">11</span>],li[<span class="hljs-number">1110</span>],dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,c,cn,la,ga;<br><span class="hljs-type">char</span> ch[<span class="hljs-number">111</span>][<span class="hljs-number">11</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>vis[x][y]=cn;c++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<span class="hljs-keyword">if</span>(!vis[x+dx[i]][y+dy[i]]&amp;&amp;ch[x+dx[i]][y+dy[i]]==ch[x][y])<span class="hljs-built_in">dfs</span>(x+dx[i],y+dy[i]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> i,j;<br>cin&gt;&gt;n&gt;&gt;k;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)cin&gt;&gt;ch[i][j];<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>cnt=cn=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">memset</span>(li,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> li);<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> vis);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)<span class="hljs-keyword">if</span>(!vis[i][j]&amp;&amp;ch[i][j]!=<span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>cn++,c=<span class="hljs-number">0</span>,<span class="hljs-built_in">dfs</span>(i,j);<br><span class="hljs-keyword">if</span>(c&gt;=k)li[cn]=<span class="hljs-number">1</span>,cnt++;<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)<span class="hljs-keyword">if</span>(li[vis[i][j]])ch[i][j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)&#123;<br><span class="hljs-keyword">for</span>(la=i=n;i&amp;&amp;ch[i][j]!=<span class="hljs-string">&#x27;0&#x27;</span>;i--,la--);<br><span class="hljs-keyword">for</span>(;i;)&#123;<br><span class="hljs-keyword">if</span>(ch[i][j]==<span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br><span class="hljs-keyword">for</span>(;i&amp;&amp;ch[i][j]==<span class="hljs-string">&#x27;0&#x27;</span>;i--);<br>ga=la-i;<br><span class="hljs-keyword">for</span>(;i&amp;&amp;ch[i][j]!=<span class="hljs-string">&#x27;0&#x27;</span>;i--)ch[i+ga][j]=ch[i][j],ch[i][j]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>la=i+ga;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(!cnt)<span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;cout&lt;&lt;endl,i++)<span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">10</span>;j++)cout&lt;&lt;ch[i][j];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[implementation]]&lt;br&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P5121&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;while(还有可以删的连通块)&amp;#123;
    找连</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF1662N/"/>
    <id>http://example.com/2022/05/30/CF1662N/</id>
    <published>2022-05-29T16:12:37.466Z</published>
    <updated>2022-05-23T15:06:15.147Z</updated>
    
    <content type="html"><![CDATA[<p>[[math]]<br><a href="https://codeforces.com/problemset/problem/1662/N">link</a></p><p>Let $a&lt;b&lt;c&lt;d$, ignoring the direction.<br>There are two passible situations:<br>$a$ $b$     |        $a$ $b$<br>$c$ $d$     |        $d$ $c$</p><p>That’s all.</p><p><em>Discovered what?</em></p><p>$b$ and $c$ must in the middle of the vertices near it.</p><p>And rectangles which aren’t eligible must don’t satisfy the description above.</p><p>And it’s doesn’t matter that whether “$b$” and “$c$” is in the same column or row or neither.</p><p>Therefore, the answer is the number of “$b$” (“$c$” and “$b$” have same features, so the answer should divided by 2).</p><p>We can use <code>sort()</code> and <code>lower_bound()</code> to compute the rank of $x_{i,j}$ in the column and row.</p><p>Complexity: $O(n^2\log n)$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1502</span>;<br><span class="hljs-type">int</span> n,m,x[N][N],b[N],prel[N][N],sufl[N][N],prec[N][N],sufc[N][N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>cin&gt;&gt;x[i][j];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)b[j]=x[i][j];<span class="hljs-built_in">sort</span>(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)prel[i][j]=<span class="hljs-built_in">lower_bound</span>(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n,x[i][j])-b<span class="hljs-number">-1</span>,sufl[i][j]=n-prel[i][j]<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)b[j]=x[j][i];<span class="hljs-built_in">sort</span>(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)prec[j][i]=<span class="hljs-built_in">lower_bound</span>(b+<span class="hljs-number">1</span>,b+<span class="hljs-number">1</span>+n,x[j][i])-b<span class="hljs-number">-1</span>,sufc[j][i]=n-prec[j][i]<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>ans+=prel[i][j]*sufc[i][j]+prec[i][j]*sufl[i][j];<br>fout&lt;&lt;ans/<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="I’m-the-first-solver-of-this-problem-in-CF"><a href="#I’m-the-first-solver-of-this-problem-in-CF" class="headerlink" title="I’m the first solver of this problem in CF!"></a>I’m the first solver of this problem in CF!</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[math]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1662/N&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let $a&amp;lt;b&amp;lt;c&amp;lt;d$, ignoring the direction.&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF1662L/"/>
    <id>http://example.com/2022/05/30/CF1662L/</id>
    <published>2022-05-29T16:12:37.462Z</published>
    <updated>2022-05-23T15:06:24.540Z</updated>
    
    <content type="html"><![CDATA[<p>[[DP]] [[conversion]]<br><a href="https://codeforces.com/problemset/problem/1662/L">link</a></p><h2 id="Tutorial-on-CF"><a href="#Tutorial-on-CF" class="headerlink" title="Tutorial on CF"></a>Tutorial on CF</h2><p>Let $x_i:&#x3D;vt_i−a_i$ and $y_i:&#x3D;vt_i+a_i$ for $i&#x3D;1,…,n$. The main observation to solve this problem is that a sequence of kicks with indices $i_1,…,i_k$ can be seen (in this order and starting from the first one) if and only if both sequences $x_{i_1},…,x_{i_k}$ and $y_{i_1},…,y_{i_k}$ are nondecreasing. To see this, observe that<br>$$<br>x_i≤x_j⟺vt_i−a_i≤vt_j−a_j⟺a_j−a_i≤v(t_j−t_i)<br>$$</p><p>and<br>$$<br>y_i≤y_j⟺vt_i+a_i≤vt_j+a_j⟺a_i−a_j≤v(t_j−t_i)<br>$$<br>Moreover<br>$$<br>t_i&#x3D;\frac{x_i+y_i}{2v}<br>$$<br>so if both sequences are nondecreasing, then their corresponding times are in increasing order and it holds that $|a_{i_ℓ}+1−a_{i_ℓ}|≤v(t_{i_ℓ}+1−t_{i_ℓ})$, which means that each event can be reached from the previous one. The converse is clear from the previous inequalities.</p><p>In order to impose the condition that the events can be reached starting from position 00 at time 00, it is enough to remove all points which cannot be reached from the origin, that is, with $|ai|&gt;vti$. We will assume that these events have been eliminated and still denote by $n$ the total number of events.</p><p>We have thus reduced the problem to finding the longest increasing subsequence of the $y$-values when ordered by increasing xx-value. More precisely, let $(p_1,…,p_n)$ be the permutation of $(1,…,n)$ such that</p><p>$i&lt;j⟹x_{p_i}&lt;x_{p_j}\ \text{or}\ (x_{p_i}&#x3D;x_{p_j}\ \text{and}\ y_{p_i}&lt;y_{p_j})$.</p><p>Then the solution of the problem is the length of the longest (non-strictly) increasing subsequence of the list $y_{p_1},…,y_{p_n}$.</p><p>There are classical algorithms to solve this efficiently in $O(n\log n)$ time. For instance, this complexity is achieved by an approach that processes the elements from left to right and uses binary searches to update the value of the smallest possible last element of a length-$k$ increasing subsequence in every prefix for every $k$.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">200005</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll t[N],a[N],n,v,nn;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">A</span>&#123;ll x,y;&#125;_[N];<br>ll dp[N],u;<br><span class="hljs-type">int</span> top;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;v);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;t[i]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;a[i]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(a[i])&lt;=v*t[i])_[++nn]=&#123;t[i]*v+a[i],t[i]*v-a[i]&#125;;n=nn;<br><span class="hljs-built_in">sort</span>(_+<span class="hljs-number">1</span>,_+<span class="hljs-number">1</span>+n,[](A a,A b)&#123;<span class="hljs-keyword">return</span> a.x&lt;b.x||(a.x==b.x&amp;&amp;a.y&lt;b.y);&#125;);<span class="hljs-comment">//lambda</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>((u=_[i].y)&gt;=dp[top])dp[++top]=u;<br><span class="hljs-keyword">else</span> dp[<span class="hljs-built_in">upper_bound</span>(dp+<span class="hljs-number">1</span>,dp+<span class="hljs-number">1</span>+top,u)-dp]=u;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,top);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[DP]] [[conversion]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1662/L&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Tutorial-on-CF&quot;&gt;&lt;a href=&quot;#Tutori</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF1662I/"/>
    <id>http://example.com/2022/05/30/CF1662I/</id>
    <published>2022-05-29T16:12:37.458Z</published>
    <updated>2022-05-23T15:06:45.504Z</updated>
    
    <content type="html"><![CDATA[<p>[[implementation]]<br><a href="https://codeforces.com/problemset/problem/1662/I">link</a></p><p>Three cases:</p><ol><li>The leftmost</li><li>In the middle</li><li>The rightmost</li></ol><p>In the sides, we can get everyone.</p><p>In the middle, we can only get people in a range of the half of the distance between the nearest shops. Use two pointers.</p><p>Although the process is simple, the code is full of details.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">200005</span>;<br><span class="hljs-type">int</span> n,m,p[N],x[N];<br><span class="hljs-type">int</span> range,l,r;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans,an;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> i;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)cin&gt;&gt;p[i];<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)cin&gt;&gt;x[i];<br><span class="hljs-built_in">sort</span>(x+<span class="hljs-number">1</span>,x+<span class="hljs-number">1</span>+m);n--;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=n&amp;&amp;i*<span class="hljs-number">100</span>&lt;x[<span class="hljs-number">1</span>];i++)ans+=p[i];<br><span class="hljs-keyword">for</span>(i=x[m]/<span class="hljs-number">100</span>+<span class="hljs-number">1</span>;i&lt;=n;i++)an+=p[i];ans=<span class="hljs-built_in">max</span>(ans,an);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;x[i]&lt;n*<span class="hljs-number">100</span>&amp;&amp;i&lt;m;i++)&#123;<br>range=(x[i+<span class="hljs-number">1</span>]-x[i])/<span class="hljs-number">2</span>/<span class="hljs-number">100</span>;<br>l=r=x[i]/<span class="hljs-number">100</span>+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(an=<span class="hljs-number">0</span>;r&lt;=n&amp;&amp;r*<span class="hljs-number">100</span>&lt;x[i+<span class="hljs-number">1</span>]&amp;&amp;r-l&lt;=range;r++)an+=p[r];<br>ans=<span class="hljs-built_in">max</span>(ans,an);<br><span class="hljs-keyword">for</span>(;r&lt;=n&amp;&amp;r*<span class="hljs-number">100</span>&lt;x[i+<span class="hljs-number">1</span>];r++,l++)&#123;<br>an-=p[l],an+=p[r];<br>ans=<span class="hljs-built_in">max</span>(ans,an);<br>&#125;<br>&#125;<br>cout&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[implementation]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1662/I&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Three cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The leftmost&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF1662D/"/>
    <id>http://example.com/2022/05/30/CF1662D/</id>
    <published>2022-05-29T16:12:37.455Z</published>
    <updated>2022-05-23T15:05:13.087Z</updated>
    
    <content type="html"><![CDATA[<p>[[string]] [[thinking]]<br><a href="https://codeforces.com/problemset/problem/1662/D">link</a></p><p>$AA$ $BB$ $ABAB$ $BCBC$ are given, ask whether string $a$ can become string $b$.</p><p>Inserting and deleting at any position are approved.</p><h2 id="Sol"><a href="#Sol" class="headerlink" title="Sol"></a>Sol</h2><p>Firstly, the parity of the occurrences of $A$, $B$ and $C$ are same in $a$ and $b$.</p><p>Then, we can transform the string $AB$ to the string $BA$ via the following sequence of moves:</p><blockquote><p>Start with $AB$, then insert $BB$ at the back of the string to get $ABBB$, then insert the string $ABAB$ in the second to last position to get $ABBABABB$.</p><p>Removing the two occurrences of $BB$ we get the string $AABA$ and then removing $AA$ we get to $BA$.</p></blockquote><p>Similarly,  we can transform the string $BC$ to the string $CB$.</p><p>Therefor, $B$ is movable and their positions are of no great importance.</p><p>$A$ and $C$ is immovable, so I only need to compare the string consist of $A$ and $C$.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> t,la,lb,pa,pb,pc;<br>string a,b;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br><span class="hljs-keyword">for</span>(;t--;)&#123;<br>cin&gt;&gt;a&gt;&gt;b;<br>la=a.<span class="hljs-built_in">length</span>();<br>lb=b.<span class="hljs-built_in">length</span>();<br>pa=pb=pc=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;la;i++)&#123;<br><span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;A&#x27;</span>)pa^=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;B&#x27;</span>)pb^=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;C&#x27;</span>)pc^=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;lb;i++)&#123;<br><span class="hljs-keyword">if</span>(b[i]==<span class="hljs-string">&#x27;A&#x27;</span>)pa^=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(b[i]==<span class="hljs-string">&#x27;B&#x27;</span>)pb^=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(b[i]==<span class="hljs-string">&#x27;C&#x27;</span>)pc^=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(pa||pb||pc)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;la;i++)<span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;B&#x27;</span>)a.<span class="hljs-built_in">erase</span>(i,<span class="hljs-number">1</span>),la--,i--;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;lb;i++)<span class="hljs-keyword">if</span>(b[i]==<span class="hljs-string">&#x27;B&#x27;</span>)b.<span class="hljs-built_in">erase</span>(i,<span class="hljs-number">1</span>),lb--,i--;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;la<span class="hljs-number">-1</span>;i++)<span class="hljs-keyword">if</span>(a[i]==a[i+<span class="hljs-number">1</span>])a.<span class="hljs-built_in">erase</span>(i,<span class="hljs-number">2</span>),i=<span class="hljs-built_in">max</span>(<span class="hljs-number">-1</span>,i<span class="hljs-number">-2</span>),la-=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;lb<span class="hljs-number">-1</span>;i++)<span class="hljs-keyword">if</span>(b[i]==b[i+<span class="hljs-number">1</span>])b.<span class="hljs-built_in">erase</span>(i,<span class="hljs-number">2</span>),i=<span class="hljs-built_in">max</span>(<span class="hljs-number">-1</span>,i<span class="hljs-number">-2</span>),lb-=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(a==b)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="string-in-STL"><a href="#string-in-STL" class="headerlink" title="string in STL"></a><a href="string.md">string in STL</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[string]] [[thinking]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1662/D&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$AA$ $BB$ $ABAB$ $BCBC$ are given, </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF1201D/"/>
    <id>http://example.com/2022/05/30/CF1201D/</id>
    <published>2022-05-29T16:12:37.453Z</published>
    <updated>2022-05-23T15:06:31.154Z</updated>
    
    <content type="html"><![CDATA[<p>[[DP]]<br><a href="https://codeforces.com/problemset/problem/1201/D">link</a></p><p>We must visit every single treasure (um, and the coordinate $(1,1)$ ,the starting point).</p><p>It’s easy to find that the position where you leave is must be the leftmost or the rightmost point.</p><p>Obviously, this is a DP problem.</p><p>A floor has two nodes, but it can only transfer from the last floor, so the states is $dp[2][2]$.</p><p>Then the most important thing is calculate the cost:</p><blockquote><p>From the lower left to the upper left</p><p>From the lower left to the upper right</p><p>From the lower right to the upper left</p><p>From the lower right to the upper right</p><p>And every point at most has two ladder to move upward, a right and a left.</p><p>And after you move upward, there are two sides you could choose to go, a right and a left as well.</p></blockquote><p>So totally, there are 16 situations.</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">300005</span>,inf=<span class="hljs-number">1e9</span>;<br><span class="hljs-type">int</span> n,m,k,q;<br><span class="hljs-type">int</span> x,y;<br><span class="hljs-type">int</span> mi[N],ma[N];<br><span class="hljs-type">int</span> d[N],pre[N],suf[N],pr,su;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> dp[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>],ans,val[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> t,top;<br><span class="hljs-type">bool</span> b;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> _,<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> a)</span></span>&#123;<br><span class="hljs-keyword">for</span>(top=t;!ma[t]&amp;&amp;t&lt;=n;t++);<br><span class="hljs-keyword">if</span>(t==n+<span class="hljs-number">1</span>)&#123;<br>ans=<span class="hljs-built_in">min</span>(dp[b][<span class="hljs-number">0</span>],dp[b][<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,top<span class="hljs-number">-2</span>+ans);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(p&lt;=mi[t])&#123;<br>val[_][<span class="hljs-number">0</span>]=<span class="hljs-built_in">min</span>(val[_][<span class="hljs-number">0</span>],inf);<br>val[_][<span class="hljs-number">1</span>]=<span class="hljs-built_in">min</span>(val[_][<span class="hljs-number">1</span>],a+ma[t]-p);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p&gt;=ma[t])&#123;<br>val[_][<span class="hljs-number">1</span>]=<span class="hljs-built_in">min</span>(val[_][<span class="hljs-number">1</span>],inf);<br>val[_][<span class="hljs-number">0</span>]=<span class="hljs-built_in">min</span>(val[_][<span class="hljs-number">0</span>],a+p-mi[t]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>val[_][<span class="hljs-number">0</span>]=<span class="hljs-built_in">min</span>(a+ma[t]-p+ma[t]-mi[t],val[_][<span class="hljs-number">0</span>]);<br>val[_][<span class="hljs-number">1</span>]=<span class="hljs-built_in">min</span>(a+p-mi[t]+ma[t]-mi[t],val[_][<span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">register</span> <span class="hljs-type">int</span> i;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k,&amp;q);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)mi[i]=m+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=k;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br><span class="hljs-keyword">if</span>(mi[x]&gt;y)mi[x]=y;<br><span class="hljs-keyword">if</span>(ma[x]&lt;y)ma[x]=y;<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=q;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x),d[x]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-keyword">if</span>(d[i])pr=i;<br>pre[i]=pr;<br>&#125;<br>su=m+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(i=m;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br><span class="hljs-keyword">if</span>(d[i])su=i;<br>suf[i]=su;<br>&#125;<br><span class="hljs-keyword">if</span>(ma[<span class="hljs-number">1</span>]!=<span class="hljs-number">0</span>)&#123;<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=ma[<span class="hljs-number">1</span>]<span class="hljs-number">-1</span>;<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=inf;<br>&#125;<br><span class="hljs-keyword">else</span> mi[<span class="hljs-number">1</span>]=ma[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//&lt;&lt;</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i=t,b^=<span class="hljs-number">1</span>)&#123;<br>t=i+<span class="hljs-number">1</span>;val[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=val[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=val[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=val[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=inf;<br><span class="hljs-keyword">if</span>(suf[mi[i]]!=mi[i]&amp;&amp;pre[mi[i]]!=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">cal</span>(<span class="hljs-number">0</span>,pre[mi[i]],mi[i]-pre[mi[i]]);<br><span class="hljs-keyword">if</span>(suf[mi[i]]!=m+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">cal</span>(<span class="hljs-number">0</span>,suf[mi[i]],suf[mi[i]]-mi[i]);<br><span class="hljs-keyword">if</span>(suf[ma[i]]!=ma[i]&amp;&amp;pre[ma[i]]!=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">cal</span>(<span class="hljs-number">1</span>,pre[ma[i]],ma[i]-pre[ma[i]]);<br><span class="hljs-keyword">if</span>(suf[ma[i]]!=m+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">cal</span>(<span class="hljs-number">1</span>,suf[ma[i]],suf[ma[i]]-ma[i]);<br>dp[b^<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-built_in">min</span>(val[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]+dp[b][<span class="hljs-number">0</span>],val[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]+dp[b][<span class="hljs-number">1</span>]);<br>dp[b^<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-built_in">min</span>(val[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]+dp[b][<span class="hljs-number">0</span>],val[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]+dp[b][<span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[DP]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1201/D&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We must visit every single treasure (um, and the coo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF1152D/"/>
    <id>http://example.com/2022/05/30/CF1152D/</id>
    <published>2022-05-29T16:12:37.450Z</published>
    <updated>2022-05-23T22:02:59.994Z</updated>
    
    <content type="html"><![CDATA[<p>[[DP]]<br><a href="https://codeforces.com/contest/1152/problem/D">link</a></p><h2 id="What’s-the-max-matching-on-a-tree"><a href="#What’s-the-max-matching-on-a-tree" class="headerlink" title="What’s the max matching on a tree?"></a>What’s the max matching on a tree?</h2><p>A simple DP!</p><h2 id="Compress-states"><a href="#Compress-states" class="headerlink" title="Compress states"></a>Compress states</h2><p>If we draw out the whole trie, well, we’ll get $2^{1000}$ nodes.<br>So how could we handle it? We should compress the states.</p><p>Imagine that there is a matrix $A$.<br>$A_{i,j}$ means there are $i$ ‘(‘ edges and $j$ ‘)’ edges on the path from this node to the root.<br>(which also means there are $n-i$ ‘(‘ edges and $n-j$ ‘)’ edges on the path from this node to the leaves)<br><em>PS: Cause we must make the bracket sequences correct, $i$ must bigger than $j$.</em></p><p>Than move the DP on trees to matrix.</p><h1 id="The-state-transfer-equation-is"><a href="#The-state-transfer-equation-is" class="headerlink" title="The state transfer equation is:"></a>The state transfer equation is:</h1><p>$$<br>\begin{align*}<br>&amp;f[i][j]&#x3D;\begin{cases}<br>g[i+1][j]+max(g[i][j+1],f[i][j+1])+1, &amp;g[i+1]&gt;g[i][j+1]\<br>g[i][j+1]+max(g[i+1][j],f[i+1][j])+1, &amp;g[i+1]&lt;&#x3D;g[i][j+1]\<br>\end{cases}\<br>&amp;g[i][j]&#x3D;max(f[i+1][j],g[i+1][j])+max(g[i][j+1],f[i][j+1])<br>\end{align*}<br>$$</p><p>$f[i][j]$ is the state that this node have a match edge to his children.</p><p>$g[i][j]$ haven’t.</p><h1 id="CODE"><a href="#CODE" class="headerlink" title="CODE:"></a>CODE:</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1003</span>,M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> f[N][N],g[N][N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);n++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=n;j&gt;=i;j--)&#123;<br><span class="hljs-keyword">if</span>(i==j)&#123;<br>f[i][j]=g[i][j+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>;<br>g[i][j]=<span class="hljs-built_in">max</span>(g[i][j+<span class="hljs-number">1</span>],f[i][j+<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==n)&#123;<br>f[i][j]=g[i+<span class="hljs-number">1</span>][j]+<span class="hljs-number">1</span>;<br>g[i][j]=<span class="hljs-built_in">max</span>(g[i+<span class="hljs-number">1</span>][j],f[i+<span class="hljs-number">1</span>][j]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(g[i+<span class="hljs-number">1</span>][j]&gt;g[i][j+<span class="hljs-number">1</span>])f[i][j]=(g[i+<span class="hljs-number">1</span>][j]+<span class="hljs-built_in">max</span>(g[i][j+<span class="hljs-number">1</span>],f[i][j+<span class="hljs-number">1</span>])+<span class="hljs-number">1</span>)%M;<br><span class="hljs-keyword">else</span> f[i][j]=(g[i][j+<span class="hljs-number">1</span>]+<span class="hljs-built_in">max</span>(g[i+<span class="hljs-number">1</span>][j],f[i+<span class="hljs-number">1</span>][j])+<span class="hljs-number">1</span>)%M;<br>g[i][j]=(<span class="hljs-built_in">max</span>(f[i+<span class="hljs-number">1</span>][j],g[i+<span class="hljs-number">1</span>][j])+<span class="hljs-built_in">max</span>(g[i][j+<span class="hljs-number">1</span>],f[i][j+<span class="hljs-number">1</span>]))%M;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-built_in">max</span>(f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],g[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[DP]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/contest/1152/problem/D&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;What’s-the-max-matching-on-a-tree&quot;&gt;&lt;a href=&quot;#What’</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF959D/"/>
    <id>http://example.com/2022/05/30/CF959D/</id>
    <published>2022-05-29T16:12:37.446Z</published>
    <updated>2022-05-23T15:06:35.535Z</updated>
    
    <content type="html"><![CDATA[<p>[[math]]<br><a href="https://codeforces.com/problemset/problem/959/D">link</a></p><blockquote><ul><li>$b$ is lexicographically greater than or equal to $a$.</li><li>$b_i ≥2$.</li><li>$b$ is pairwise coprime: for every $1 ≤ i &lt; j ≤ n$,  $b_i$ and $b_j$ are coprime</li></ul></blockquote><p>If $i&lt;j,b_i&gt;b_j$,  $b$ is lexicographically greater than or equal to $a$, then swap $b_i$ and $b_j$, the set of numbers of $b$ is the same.</p><p>Therefore, $b$ is increasing.<br>Every time we choose the number of $b_i$, must choose the minimum value that meets the condition.</p><p>So, what the requirement means?</p><p>First, $b_i&#x3D;a_i$, until $b_i$ can’t equal to $a_i$, must bigger.($\gcd(b_i,a_j)!&#x3D;1, j&lt;i$)<br>We can reach that by sieve method.</p><p>Later, we don’t need to care about lexicographically greater, which means we don’t need to care about $a$.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2000000</span>;<br><span class="hljs-type">int</span> n,a,aa,b,v[N+<span class="hljs-number">5</span>],f,P[N];<br>set&lt;<span class="hljs-type">int</span>&gt; p;<br>set&lt;<span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=x;i&lt;=N;i+=x)<span class="hljs-keyword">if</span>(!v[i])v[i]=<span class="hljs-number">1</span>,p.<span class="hljs-built_in">erase</span>(i);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=N;i++)&#123;<br>p.<span class="hljs-built_in">insert</span>(i);<br><span class="hljs-keyword">if</span>(!v[i])P[++P[<span class="hljs-number">0</span>]]=i;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=P[<span class="hljs-number">0</span>]&amp;&amp;i*P[j]&lt;=N;j++)&#123;<br>v[i*P[j]]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(i%P[j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">memset</span>(v,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> v);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> o=<span class="hljs-number">1</span>;o&lt;=n;o++)&#123;<br>b=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br><span class="hljs-keyword">if</span>(f)it=p.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">else</span>&#123;<br>it=p.<span class="hljs-built_in">lower_bound</span>(a);<br><span class="hljs-keyword">if</span>(*it!=a)f=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,*it);<br>aa=a=*it;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;P[i]*P[i]&lt;=aa;i++)&#123;<br><span class="hljs-keyword">if</span>(a%P[i]==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(!v[P[i]])<span class="hljs-built_in">update</span>(P[i]);<br><span class="hljs-keyword">for</span>(;a%P[i]==<span class="hljs-number">0</span>;a/=P[i]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(a!=<span class="hljs-number">1</span>&amp;&amp;!v[a])<span class="hljs-built_in">update</span>(a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[math]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/959/D&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;$b$ is lexicographically greater</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF894B/"/>
    <id>http://example.com/2022/05/30/CF894B/</id>
    <published>2022-05-29T16:12:37.443Z</published>
    <updated>2022-05-23T15:05:02.490Z</updated>
    
    <content type="html"><![CDATA[<p>[[math]]<br><a href="https://codeforces.com/problemset/problem/894/B">link</a></p><p>First, it’s obvious that the numbers put can be only 1 or -1.</p><p>If k equals to -1 and the parity of n and m differ, the answer is obviously 0.</p><blockquote><p>Assume that $n$ is even and $m$ is even, the count of -1 equals to $n<em>odd$ (even) and $m</em>odd$ (odd), and it is impassible to be odd and even at the same time.</p></blockquote><p>Otherwise, for the first n-1 lines and the first m-1 columns, we can put either 1 or -1 in it,<br>and there’re $2^{(n - 1) * (m-1)}$ ways in total.</p><p> Then it’s obvious that the remaining numbers are uniquely determined because the product of each row and each column is known already.</p><p>So in this case the answer is $2^{(n - 1) * (m-1)}$ .</p><p>We can use fast power, which is easy.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>ll n,m,ret;<br><span class="hljs-type">int</span> k;<br><span class="hljs-function">ll <span class="hljs-title">fp</span><span class="hljs-params">(ll x,ll a)</span></span>&#123;<br><span class="hljs-keyword">for</span>(ret=<span class="hljs-number">1</span>;a;a&gt;&gt;=<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(a&amp;<span class="hljs-number">1</span>)(ret*=x)%=mod;<br>(x*=x)%=mod;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%d&quot;</span>,&amp;n,&amp;m,&amp;k);<br><span class="hljs-keyword">if</span>(!~k&amp;&amp;(n&amp;<span class="hljs-number">1</span>)!=(m&amp;<span class="hljs-number">1</span>))<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>),<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,<span class="hljs-built_in">fp</span>(<span class="hljs-built_in">fp</span>(<span class="hljs-number">2</span>,n<span class="hljs-number">-1</span>),m<span class="hljs-number">-1</span>));<br>&#125; <br></code></pre></td></tr></table></figure><p>(If the code is very long, I’ll leave a link.)</p><p>2022.3.28</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[math]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/894/B&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, it’s obvious that the numbers put can be onl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF869D/"/>
    <id>http://example.com/2022/05/30/CF869D/</id>
    <published>2022-05-29T16:12:37.440Z</published>
    <updated>2022-05-23T15:05:08.895Z</updated>
    
    <content type="html"><![CDATA[<p>[[dfs]] [[trees_and_similar]]<br><a href="https://codeforces.com/problemset/problem/869/D">link</a></p><p>At first, I felt confused about the description.</p><p>calculate the number of simple paths in a completed binary tree with a few extra edges? n&lt;1e9!?</p><p>O(n) is unacceptable.</p><p>Then, I tried to compress the nodes. But after I compressed them, I have way to calculate the number of simple paths.</p><p>I’ve read the tutorial.</p><h2 id="How-to-compress-a-tree-with-only-a-few-extra-edges"><a href="#How-to-compress-a-tree-with-only-a-few-extra-edges" class="headerlink" title="How to compress a tree with only a few extra edges?"></a>How to compress a tree with only a few extra edges?</h2><p>With one extra edge? 基环树。</p><p>What about more edge? 多环树？Name isn’t important.</p><p>Find out the graph consisting of cycles.</p><p>Every node can represent the tree below it, so the small tree is able to be compressed to the root.</p><hr><p>At last, calculate the number of simple paths is a simple dfs problem.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">500</span>,M=<span class="hljs-number">2000</span>,mod=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n,m,h[N],nxt[M],to[M],t,a,b;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>nxt[++t]=h[u],h[u]=t,to[t]=v;<br>nxt[++t]=h[v],h[v]=t,to[t]=u;<br>&#125;<br><span class="hljs-type">int</span> it;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;I;<br><span class="hljs-type">int</span> vis[N];<br>[[define]] pb push_back<br><span class="hljs-type">int</span> d,rem;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br><span class="hljs-type">int</span> l,r,_=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(it=u;it;_++,it&gt;&gt;=<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(it=u;(it&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>)&lt;=n;it=it&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>);r=it;<br><span class="hljs-keyword">for</span>(it=u;(it&lt;&lt;<span class="hljs-number">1</span>)&lt;=n;it=it&lt;&lt;<span class="hljs-number">1</span>);l=it;<br><span class="hljs-keyword">if</span>(r&gt;n-rem)<span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>&lt;&lt;d-_+<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l&lt;=n-rem)<span class="hljs-built_in">return</span> (<span class="hljs-number">1</span>&lt;&lt;d-_)<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">return</span> (<span class="hljs-number">1</span>&lt;&lt;d-_)+n-l;<br>&#125;<br><span class="hljs-type">int</span> num[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> tot,ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>vis[u]=<span class="hljs-number">1</span>;tot+=num[u];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> e=h[u],v;e;e=nxt[e])<br><span class="hljs-keyword">if</span>(!vis[v=to[e]])<span class="hljs-built_in">dfs</span>(v);<br>vis[u]=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> x[<span class="hljs-number">5</span>],y[<span class="hljs-number">5</span>],u,v;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">id</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span></span>&#123;<br><span class="hljs-keyword">if</span>(!I[num])I[num]=I.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">return</span> I[num];<br>&#125;<br><span class="hljs-type">int</span> fa;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,<span class="hljs-number">1ll</span>*n*n%mod);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(it=n;it;it&gt;&gt;=<span class="hljs-number">1</span>)d++;<br>rem=n-(<span class="hljs-number">1</span>&lt;&lt;d<span class="hljs-number">-1</span>)+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x[i],&amp;y[i]);<br><span class="hljs-keyword">for</span>(it=x[i];it;it&gt;&gt;=<span class="hljs-number">1</span>)<span class="hljs-built_in">id</span>(it);<br><span class="hljs-keyword">for</span>(it=y[i];it;it&gt;&gt;=<span class="hljs-number">1</span>)<span class="hljs-built_in">id</span>(it);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p:I)<span class="hljs-keyword">if</span>(p.first!=<span class="hljs-number">1</span>)<span class="hljs-built_in">add</span>(p.second,I[p.first&gt;&gt;<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p:I)num[p.second]=<span class="hljs-built_in">cal</span>(p.first);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p:I)&#123;<br>fa=I[p.first&gt;&gt;<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> e=h[u=p.second];e;e=nxt[e])<br><span class="hljs-keyword">if</span>(!vis[v=to[e]]&amp;&amp;v!=fa)<br>num[u]-=num[v],vis[v]=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> vis);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<span class="hljs-built_in">add</span>(I[x[i]],I[y[i]]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p:I)&#123;<br>tot=<span class="hljs-number">0</span>;<span class="hljs-built_in">dfs</span>(p.second);<br>ans=(ans+tot*num[p.second]%mod)%mod;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[dfs]] [[trees_and_similar]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/869/D&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At first, I felt confused abou</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF862D/"/>
    <id>http://example.com/2022/05/30/CF862D/</id>
    <published>2022-05-29T16:12:37.437Z</published>
    <updated>2022-05-23T15:04:57.433Z</updated>
    
    <content type="html"><![CDATA[<p>[[interactive]] [[divide_and_conquer]]<br><a href="https://codeforces.com/problemset/problem/862/D">link</a></p><p>We are allowed to query 15 times, and n&lt;1000.<br>Obviously, use &#x3D;&#x3D;divide and conquer&#x3D;&#x3D; algorithm.</p><h3 id="A-small-conclusion"><a href="#A-small-conclusion" class="headerlink" title="A small conclusion"></a>A small conclusion</h3><p>Make $h(1,n)$ represent the Hamming distance from 1 to n.</p><p>x is the number before altering, y is after.</p><p>We change 0&#x2F;1 within the range of 1~mid.<br>$$<br>\begin{cases}<br>&amp;x&#x3D;h(1,n)&#x3D;h(1,m)+h(m+1,r)\<br>&amp;y&#x3D;h’(1,m)+h(m+1,r)&#x3D;(m-l+1-h(1,m))+h(m+1,r)\<br>\end{cases}<br>\<br>\iff<br>\<br>\begin{cases}<br>&amp;h(l,m)&#x3D;(x-y-(m-l+1))&#x2F;2\<br>&amp;h(m+1,r)&#x3D;(x+y+(m-l+1))&#x2F;2<br>\end{cases}<br>$$</p><hr><p>Then, we can use $h1[2]$, $h2[2]$ to represent the number of number 0 or 1 in two sides.</p><p>If one side is full of 1 or full of 0. The next goal is to find the another number in the other side.</p><p>If both sides have 1 and 0, choose either side to continue to divide and conquer.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,o[<span class="hljs-number">1003</span>],h1[<span class="hljs-number">2</span>],h2[<span class="hljs-number">2</span>],x[<span class="hljs-number">2</span>],y,h;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;? &quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,o[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">fflush</span>(stdout);<br>&#125;<br><span class="hljs-type">int</span> ans[<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">end</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;! %d %d&quot;</span>,ans[<span class="hljs-number">0</span>],ans[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">to1</span><span class="hljs-params">(<span class="hljs-type">int</span> f)</span></span>&#123;<br>x[<span class="hljs-number">0</span>]=h1[<span class="hljs-number">0</span>],x[<span class="hljs-number">1</span>]=h1[<span class="hljs-number">1</span>];<br>h+=h2[f];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">to2</span><span class="hljs-params">(<span class="hljs-type">int</span> f)</span></span>&#123;<br>x[<span class="hljs-number">0</span>]=h2[<span class="hljs-number">0</span>],x[<span class="hljs-number">1</span>]=h2[<span class="hljs-number">1</span>];<br>h+=h1[f^<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dc</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> f)</span></span>&#123;<br><span class="hljs-type">int</span> m=l+r&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=m;i++)o[i]=f;<br><span class="hljs-built_in">print</span>();<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;y);<br>y-=h;<br>h1[f]=(x[f]-y+(m-l+<span class="hljs-number">1</span>))/<span class="hljs-number">2</span>;<span class="hljs-comment">//the number of f</span><br>h1[f^<span class="hljs-number">1</span>]=m-l+<span class="hljs-number">1</span>-h1[f];<br>h2[f]=(x[f]+y-(m-l+<span class="hljs-number">1</span>))/<span class="hljs-number">2</span>;<br>h2[f^<span class="hljs-number">1</span>]=r-m-h2[f];<br><span class="hljs-keyword">if</span>(!ans[<span class="hljs-number">0</span>]&amp;&amp;!ans[<span class="hljs-number">1</span>])&#123;<br><span class="hljs-keyword">if</span>(h1[f]==m-l+<span class="hljs-number">1</span>||h1[f]==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(h1[f]==m-l+<span class="hljs-number">1</span>)ans[f]=l;<br><span class="hljs-keyword">if</span>(h1[f]==<span class="hljs-number">0</span>)ans[f^<span class="hljs-number">1</span>]=l;<br><span class="hljs-built_in">to2</span>(f);<span class="hljs-built_in">dc</span>(m+<span class="hljs-number">1</span>,r,f);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(h2[f]==r-m)ans[f]=r;<br><span class="hljs-keyword">if</span>(h2[f]==<span class="hljs-number">0</span>)ans[f^<span class="hljs-number">1</span>]=r;<br><span class="hljs-built_in">to1</span>(f);<span class="hljs-built_in">dc</span>(l,m,f^<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1</span>;i++)<span class="hljs-keyword">if</span>(!ans[i])&#123;<br><span class="hljs-keyword">if</span>(h1[i]==m-l+<span class="hljs-number">1</span>)ans[i]=l,<span class="hljs-built_in">end</span>();<br><span class="hljs-keyword">if</span>(h2[i]==r-m)ans[i]=r,<span class="hljs-built_in">end</span>();<br><span class="hljs-keyword">if</span>(!h1[i])<span class="hljs-built_in">to2</span>(f),<span class="hljs-built_in">dc</span>(m+<span class="hljs-number">1</span>,r,f);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">to1</span>(f),<span class="hljs-built_in">dc</span>(l,m,f^<span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-built_in">print</span>();<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x[<span class="hljs-number">1</span>]);x[<span class="hljs-number">0</span>]=n-x[<span class="hljs-number">1</span>];<br><span class="hljs-built_in">dc</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[interactive]] [[divide_and_conquer]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/862/D&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We are allowed to que</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF814D/"/>
    <id>http://example.com/2022/05/30/CF814D/</id>
    <published>2022-05-29T16:12:37.435Z</published>
    <updated>2022-05-23T22:01:16.089Z</updated>
    
    <content type="html"><![CDATA[<p>[[DP]]<br><a href="https://codeforces.com/problemset/problem/814/D">link</a></p><p>The circles are shaped like a tree(or forest).</p><p>n&lt;1000, consider DP.</p><p>We can find that if the parity of both sides is fixed, whether the next number is - or + is fixed.</p><p>By this way, we can use $u$,$0&#x2F;1$,$0&#x2F;1$ as the state.<br>$$<br>g[i][j]&#x3D;f[v][i][j]\<br>f[u][i][j]&#x3D;max\begin{cases}g[i\oplus1][j]+val[u]<em>(i&#x3D;&#x3D;0?1:-1)\<br>g[i][j\oplus1]+val[u]</em>(j&#x3D;&#x3D;0?1:-1)<br>\end{cases}<br>$$<br>We must control the plus or minus sign by hand, so that the area can be right.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1003</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">O</span>&#123;<br>ll x,y,r;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> O&amp;a)<span class="hljs-type">const</span>&#123;<span class="hljs-keyword">return</span> r&lt;a.r;&#125;<br>&#125;nd[N];<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> x(i) nd[i].x</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> y(i) nd[i].y</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> r(i) nd[i].r</span><br>vector&lt;<span class="hljs-type">int</span>&gt;e[N];<br><span class="hljs-type">int</span> que[N],l,r,fa[N],u;<br>ll f[N][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>],g[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>],ans;<span class="hljs-comment">//0-&gt;odd 1-&gt;even</span><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> Pi=<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-type">int</span> deg[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> i,j;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>,&amp;<span class="hljs-built_in">x</span>(i),&amp;<span class="hljs-built_in">y</span>(i),&amp;<span class="hljs-built_in">r</span>(i));<br><span class="hljs-built_in">sort</span>(nd+<span class="hljs-number">1</span>,nd+n+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(e[i].<span class="hljs-built_in">empty</span>())que[++r]=i;<br><span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;=n;j++)<br><span class="hljs-keyword">if</span>((<span class="hljs-built_in">x</span>(i)-<span class="hljs-built_in">x</span>(j))*(<span class="hljs-built_in">x</span>(i)-<span class="hljs-built_in">x</span>(j))+(<span class="hljs-built_in">y</span>(i)-<span class="hljs-built_in">y</span>(j))*(<span class="hljs-built_in">y</span>(i)-<span class="hljs-built_in">y</span>(j))&lt;<span class="hljs-built_in">r</span>(j)*<span class="hljs-built_in">r</span>(j))&#123;<br>fa[i]=j,e[j].<span class="hljs-built_in">push_back</span>(i),deg[j]++;<span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(l=<span class="hljs-number">1</span>;l&lt;=r;l++)&#123;<br><span class="hljs-keyword">if</span>(fa[u=que[l]]&amp;&amp;--deg[fa[u]]==<span class="hljs-number">0</span>)que[++r]=fa[u];<br>g[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=g[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=g[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=g[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1</span>;i++)<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">1</span>;j++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> v:e[u])<br>g[i][j]+=f[v][i][j]; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1</span>;i++)<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">1</span>;j++)<br>f[u][i][j]=<span class="hljs-built_in">max</span>(g[i^<span class="hljs-number">1</span>][j]+<span class="hljs-built_in">r</span>(u)*<span class="hljs-built_in">r</span>(u)*(i==<span class="hljs-number">0</span>?<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>),g[i][j^<span class="hljs-number">1</span>]+<span class="hljs-built_in">r</span>(u)*<span class="hljs-built_in">r</span>(u)*(j==<span class="hljs-number">0</span>?<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>));<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">if</span>(!fa[i])ans+=f[i][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.8lf&quot;</span>,ans*Pi);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[DP]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/814/D&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The circles are shaped like a tree(or forest).&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF814C/"/>
    <id>http://example.com/2022/05/30/CF814C/</id>
    <published>2022-05-29T16:12:37.431Z</published>
    <updated>2022-05-23T15:04:46.833Z</updated>
    
    <content type="html"><![CDATA[<p>[[DP]]<br><a href="https://codeforces.com/contest/814/problem/C">link</a></p><p>How stupid of me!<br>I couldn’t find the possible time complexity at the first time.<br>Just look at the data range, $n&lt;1500$, $q&lt;200000$.<br>Obviously, $O(nq)$ is impossible, but I thought about it for a long time.</p><p>Maybe $O(n^2+q)$?</p><p>We need O(1) query, so we must store every possible query.</p><p>Use DP(dynamic programming).</p><p>Optimizing to 2D (without $|\Sigma|$) is possible, but not necessary.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,q,ans[<span class="hljs-number">26</span>][<span class="hljs-number">2003</span>],cost[<span class="hljs-number">26</span>],x;<br><span class="hljs-type">char</span> o[<span class="hljs-number">2003</span>],c;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>cin&gt;&gt;n&gt;&gt;o+<span class="hljs-number">1</span>&gt;&gt;q;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-built_in">memset</span>(cost,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> cost);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;=n;j++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">26</span>;k++)&#123;<br><span class="hljs-keyword">if</span>(k==o[j]-<span class="hljs-string">&#x27;a&#x27;</span>)cost[k]++;<br>ans[k][j-i+<span class="hljs-number">1</span>-cost[k]]=<span class="hljs-built_in">max</span>(j-i+<span class="hljs-number">1</span>,ans[k][j-i+<span class="hljs-number">1</span>-cost[k]]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;x&lt;<span class="hljs-number">26</span>;x++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>ans[x][i]=<span class="hljs-built_in">max</span>(ans[x][i],ans[x][i<span class="hljs-number">-1</span>]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(;q--;cin&gt;&gt;x&gt;&gt;c,<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans[c-<span class="hljs-string">&#x27;a&#x27;</span>][x]));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[DP]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/contest/814/problem/C&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How stupid of me!&lt;br&gt;I couldn’t find the possible time c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF811D/"/>
    <id>http://example.com/2022/05/30/CF811D/</id>
    <published>2022-05-29T16:12:37.428Z</published>
    <updated>2022-05-23T15:04:42.302Z</updated>
    
    <content type="html"><![CDATA[<p>[[interactive]] [[shortest_path]]<br><a href="https://codeforces.com/problemset/problem/811/D">link</a></p><p>An interactive problem, we need use <code>fflush(stdout);</code></p><p>First, find a path to the destination, using BFS.</p><p>Then, hit the wall or “lose” for less than two times to update the right direction.</p><p>Finally, walk to the destination.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,x,y,xx,yy,cnt,a[<span class="hljs-number">102</span>][<span class="hljs-number">102</span>],way[<span class="hljs-number">20004</span>];<br><span class="hljs-type">char</span> c;<br><span class="hljs-type">int</span> que[<span class="hljs-number">10004</span>][<span class="hljs-number">2</span>],l,r,vis[<span class="hljs-number">102</span>][<span class="hljs-number">102</span>],dx[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;,dy[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,ret[<span class="hljs-number">102</span>][<span class="hljs-number">102</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)&#123;<br>cin&gt;&gt;c;<br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;F&#x27;</span>)a[i][j]=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;*&#x27;</span>)a[i][j]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)vis[<span class="hljs-number">0</span>][i]=vis[i][<span class="hljs-number">0</span>]=vis[n+<span class="hljs-number">1</span>][i]=vis[i][m+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>que[l][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,que[l][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;vis[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;l&lt;=r;l++)&#123;<br>x=que[l][<span class="hljs-number">0</span>],y=que[l][<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span>(a[x][y]==<span class="hljs-number">2</span>)<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<span class="hljs-keyword">if</span>(!vis[xx=x+dx[i]][yy=y+dy[i]]&amp;&amp;a[xx][yy]!=<span class="hljs-number">1</span>)&#123;<br>ret[xx][yy]=i;<br>que[++r][<span class="hljs-number">0</span>]=xx;<br>que[r][<span class="hljs-number">1</span>]=yy;<br>vis[xx][yy]=<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(;x!=<span class="hljs-number">1</span>||y!=<span class="hljs-number">1</span>;)&#123;<br>way[cnt++]=ret[x][y];<br>xx=x;yy=y;<br>x-=dx[ret[xx][yy]];<br>y-=dy[ret[xx][yy]];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=cnt<span class="hljs-number">-1</span>,j=<span class="hljs-number">0</span>;j&lt;i;j++,i--)&#123;<br><span class="hljs-built_in">swap</span>(way[i],way[j]);<br>&#125;<br><span class="hljs-type">char</span> ch[<span class="hljs-number">4</span>]=&#123;<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;U&#x27;</span>&#125;;<br>x=y=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cnt;i++)&#123;<br>cout&lt;&lt;ch[way[i]]&lt;&lt;endl;<br><span class="hljs-built_in">fflush</span>(stdout);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;xx,&amp;yy);<br><span class="hljs-keyword">if</span>(x+dx[way[i]]!=xx||y+dy[way[i]]!=yy)&#123;<br><span class="hljs-built_in">swap</span>(ch[way[i]],ch[way[i]^<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">if</span>((xx!=x||yy!=y)&amp;&amp;(xx!=<span class="hljs-number">-1</span>||yy!=<span class="hljs-number">-1</span>))<br>cout&lt;&lt;ch[way[i]]&lt;&lt;endl,<span class="hljs-built_in">fflush</span>(stdout),<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>cout&lt;&lt;ch[way[i]]&lt;&lt;endl,<span class="hljs-built_in">fflush</span>(stdout),<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>&#125;<br><span class="hljs-keyword">else</span> x+=dx[way[i]],y+=dy[way[i]];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[interactive]] [[shortest_path]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/811/D&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An interactive problem, we</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF776D/"/>
    <id>http://example.com/2022/05/30/CF776D/</id>
    <published>2022-05-29T16:12:37.425Z</published>
    <updated>2022-05-23T15:04:51.341Z</updated>
    
    <content type="html"><![CDATA[<p>[[2-sat]]<br><a href="http://codeforces.com/problemset/problem/776/D">link</a></p><p>The most important information is that each door is controlled by <strong>exactly two</strong> switches.</p><p>If this door is closed, If the first switch is selected, then the second switch must can’t be selected,</p><p>​If the first switch isn’t selected, then the second switch must be selected.</p><p>If this door is on, If the first switch is selected, then the second switch must be selected,</p><p>​If the first switch isn’t selected, then the second switch must can’t be selected.</p><p>Use <strong>2-sat</strong>.</p><p>Divide a switch into two nodes.</p><p>A node means if select this switch, another means if don’t select this switch.</p><p>Then put it down, if you must to do it.</p><p>If meet something wrong (you must select and must can’t select a switch in the same time), print NO.</p><p>If everything is ok, print YES.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">200010</span>;<br><span class="hljs-type">int</span> a,n,m,l[N],link[<span class="hljs-number">2</span>][N],o,t;<br><span class="hljs-type">int</span> h[N&lt;&lt;<span class="hljs-number">1</span>],to[N&lt;&lt;<span class="hljs-number">2</span>],nxt[N&lt;&lt;<span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>nxt[++t]=h[u],h[u]=t,to[t]=v;<br>nxt[++t]=h[v],h[v]=t,to[t]=u;<br>&#125;<br><span class="hljs-type">int</span> vis[N&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br><span class="hljs-keyword">if</span>(vis[u^<span class="hljs-number">1</span>])<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>vis[u]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> e=h[u];e;e=nxt[e])<br><span class="hljs-keyword">if</span>(!vis[to[e]]&amp;&amp;!<span class="hljs-built_in">dfs</span>(to[e]))<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;l[i]);<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;o);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=o;j++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br><span class="hljs-keyword">if</span>(link[<span class="hljs-number">0</span>][a])link[<span class="hljs-number">1</span>][a]=i*<span class="hljs-number">2</span>;<br><span class="hljs-keyword">else</span> link[<span class="hljs-number">0</span>][a]=i*<span class="hljs-number">2</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(l[i])&#123;<br><span class="hljs-built_in">add</span>(link[<span class="hljs-number">0</span>][i],link[<span class="hljs-number">1</span>][i]);<br><span class="hljs-built_in">add</span>(link[<span class="hljs-number">0</span>][i]^<span class="hljs-number">1</span>,link[<span class="hljs-number">1</span>][i]^<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">add</span>(link[<span class="hljs-number">0</span>][i]^<span class="hljs-number">1</span>,link[<span class="hljs-number">1</span>][i]);<br><span class="hljs-built_in">add</span>(link[<span class="hljs-number">0</span>][i],link[<span class="hljs-number">1</span>][i]^<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br><span class="hljs-keyword">if</span>(!vis[i*<span class="hljs-number">2</span>]&amp;&amp;!vis[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]&amp;&amp;!<span class="hljs-built_in">dfs</span>(i*<span class="hljs-number">2</span>))<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO&quot;</span>),<span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[2-sat]]&lt;br&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/776/D&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The most important information is that each door is</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF761C/"/>
    <id>http://example.com/2022/05/30/CF761C/</id>
    <published>2022-05-29T16:12:37.422Z</published>
    <updated>2022-05-23T22:08:14.036Z</updated>
    
    <content type="html"><![CDATA[<p>[[DP]]<br><a href="https://codeforces.com/problemset/problem/761/C">link</a></p><p>First, calc three numbers about i-th string which mean the shortest distance to ‘#’ ‘*‘ ‘&amp;’, number and letter.</p><p>Then, use DP.</p><p>The DP transfer equation is:<br>$$<br>\begin{aligned}<br>&amp;dp[1][0][0][i]&#x3D;dp[1][0][0][i-1]+da[i][0]\<br>&amp;dp[0][1][0][i]&#x3D;dp[0][1][0][i-1]+da[i][1]\<br>&amp;dp[0][0][1][i]&#x3D;dp[0][0][1][i-1]+da[i][2]\<br>&amp;dp[1][1][0][i]&#x3D;min<br>\begin{cases}<br>dp[1][1][0][i-1]+min(da[i][0],da[i][1])\<br>dp[1][0][0][i-1]+da[i][1]\<br>dp[0][1][0][i-1]+da[i][0]<br>\end{cases}\<br>&amp;dp[0][1][1][i]&#x3D;min<br>\begin{cases}<br>dp[0][1][1][i-1]+min(da[i][1],da[i][2])\<br>dp[0][1][0][i-1]+da[i][2]\<br>dp[0][0][1][i-1]+da[i][1]<br>\end{cases}\<br>&amp;dp[1][0][1][i]&#x3D;min<br>\begin{cases}<br>dp[1][0][1][i-1]+min(da[i][0],da[i][2])\<br>dp[1][0][0][i-1]+da[i][2]\<br>dp[0][0][1][i-1]+da[i][0]<br>\end{cases}\<br>&amp;dp[1][1][1][i]&#x3D;min<br>\begin{cases}<br>dp[1][1][1][i-1]+min(da[i][0],min(da[i][1],da[i][2]))\<br>dp[1][1][0][i-1]+da[i][2]\<br>dp[1][0][1][i-1]+da[i][1]\<br>dp[0][1][1][i-1]+da[i][0]<br>\end{cases}<br>\end{aligned}<br>$$<br>Every bit stores whether this kind of characters has appeared.</p><p>That’s all.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,m,dp[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>][<span class="hljs-number">2</span>][<span class="hljs-number">55</span>],da[<span class="hljs-number">55</span>][<span class="hljs-number">3</span>],l,r;<br><span class="hljs-type">char</span> a[<span class="hljs-number">55</span>][<span class="hljs-number">55</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isn</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span></span>&#123;<br><span class="hljs-keyword">return</span> c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isc</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span></span>&#123;<br><span class="hljs-keyword">return</span> c==<span class="hljs-string">&#x27;#&#x27;</span>||c==<span class="hljs-string">&#x27;&amp;&#x27;</span>||c==<span class="hljs-string">&#x27;*&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isa</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span></span>&#123;<br><span class="hljs-keyword">return</span> c&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;z&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)cin&gt;&gt;a[i][j];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isn</span>(a[i][<span class="hljs-number">1</span>]))&#123;<br><span class="hljs-keyword">for</span>(l=<span class="hljs-number">2</span>,r=m;l&lt;=r;l++,r--)<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isn</span>(a[i][l])||<span class="hljs-built_in">isn</span>(a[i][r]))&#123;<br>da[i][<span class="hljs-number">0</span>]=l<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(l&gt;r)da[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1e3</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isc</span>(a[i][<span class="hljs-number">1</span>]))&#123;<br><span class="hljs-keyword">for</span>(l=<span class="hljs-number">2</span>,r=m;l&lt;=r;l++,r--)<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isc</span>(a[i][l])||<span class="hljs-built_in">isc</span>(a[i][r]))&#123;<br>da[i][<span class="hljs-number">1</span>]=l<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(l&gt;r)da[i][<span class="hljs-number">1</span>]=<span class="hljs-number">1e3</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isa</span>(a[i][<span class="hljs-number">1</span>]))&#123;<br><span class="hljs-keyword">for</span>(l=<span class="hljs-number">2</span>,r=m;l&lt;=r;l++,r--)<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isa</span>(a[i][l])||<span class="hljs-built_in">isa</span>(a[i][r]))&#123;<br>da[i][<span class="hljs-number">2</span>]=l<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(l&gt;r)da[i][<span class="hljs-number">2</span>]=<span class="hljs-number">1e3</span>;<br>&#125;<br>&#125;<br>dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=da[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=da[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=da[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>];<br>dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1e3</span>;<br>dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1e3</span>;<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1e3</span>;<br>dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1e3</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][i]=dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+da[i][<span class="hljs-number">0</span>];<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][i]=dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+da[i][<span class="hljs-number">1</span>];<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][i]=dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]+da[i][<span class="hljs-number">2</span>];<br>dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][i]=<span class="hljs-built_in">min</span>(dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+<span class="hljs-built_in">min</span>(da[i][<span class="hljs-number">0</span>],da[i][<span class="hljs-number">1</span>]),<span class="hljs-built_in">min</span>(dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+da[i][<span class="hljs-number">1</span>],dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+da[i][<span class="hljs-number">0</span>]));<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][i]=<span class="hljs-built_in">min</span>(dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]+<span class="hljs-built_in">min</span>(da[i][<span class="hljs-number">1</span>],da[i][<span class="hljs-number">2</span>]),<span class="hljs-built_in">min</span>(dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+da[i][<span class="hljs-number">2</span>],dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]+da[i][<span class="hljs-number">1</span>]));<br>dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][i]=<span class="hljs-built_in">min</span>(dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]+<span class="hljs-built_in">min</span>(da[i][<span class="hljs-number">0</span>],da[i][<span class="hljs-number">2</span>]),<span class="hljs-built_in">min</span>(dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+da[i][<span class="hljs-number">2</span>],dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]+da[i][<span class="hljs-number">0</span>]));<br>dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][i]=<span class="hljs-built_in">min</span>(dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]+<span class="hljs-built_in">min</span>(da[i][<span class="hljs-number">0</span>],<span class="hljs-built_in">min</span>(da[i][<span class="hljs-number">1</span>],da[i][<span class="hljs-number">2</span>])),<span class="hljs-built_in">min</span>(dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+da[i][<span class="hljs-number">2</span>],<span class="hljs-built_in">min</span>(dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]+da[i][<span class="hljs-number">1</span>],dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]+da[i][<span class="hljs-number">0</span>])));<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][n]);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[DP]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/761/C&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, calc three numbers about i-th string which mea</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF711E/"/>
    <id>http://example.com/2022/05/30/CF711E/</id>
    <published>2022-05-29T16:12:37.419Z</published>
    <updated>2022-05-23T15:04:05.097Z</updated>
    
    <content type="html"><![CDATA[<p>[[math]] [[combinatorics]] [[inverse_element]]<br><a href="https://codeforces.com/problemset/problem/711/E">link</a></p><h2 id="The-tutorial-on-CF"><a href="#The-tutorial-on-CF" class="headerlink" title="The tutorial on CF"></a>The tutorial on CF</h2><p>Note that <em>MOD</em>&#x3D;10^6^+3 is a prime.</p><p>Firstly, if we have $k &gt; 2^n$, then by pigeonhole principle(鸽笼原理) we must have 2 people with the same birthday. Thus, we can directly output 1 1.</p><p>Thus, now we suppose $k \le 2^n$. Then, instead of computing the probability directly, we compute the complement, i.e. the probability that all the people have distinct birthdays. This probability <code>turns out</code> to be much simpler to calculate, as it is just &#x3D;&#x3D;$\frac{(2^n-1)*(2^n-2)…(2^n-(k-1))}{2^{(k-1)n}}$&#x3D;&#x3D;. (Fix the birthday of the first person, the probability that the second person has different birthday is $\frac{2^n-1}{2^n}$, and for the next person it’s $\frac{2^n-2}{2^n}$ and so on.)</p><p>Now, we know that the denominator is just a power of 2. However, we still have to reduce the fraction to the lowest terms. Note that $\frac{a}{b}$ is in the lowest terms if and only if $1-\frac{a}{b}&#x3D;\frac{b-a}{b}$ is in the lowest terms,since $gcd(a,b)&#x3D;gcd(b-a,b)$ . Also, note that the gcd is a power of 2 since the denominator is a power of 2. Thus, we need to find the highest power of 2 that divides (2<em>n</em> - 1)(2<em>n</em> - 2)…(2<em>n</em> - (<em>k</em> - 1)). This is also equal to the sum of the highest power of 2 that divides 2n-1, 2n-2, …, 2n-(k-1).</p><p>Now, &#x3D;&#x3D;if a power of 2 divides <em>x</em> &lt; 2^n^, then it must also divides 2^n^ - <em>x</em> and vice versa.&#x3D;&#x3D; So, we can actually translate this to finding the sum of highest power of 2 that divides 1, 2, …, <em>k</em> - 1, or the highest power of 2 that divides (<em>k</em> - 1)! . Now, this is simple to calculate by Legendre’s formula (which is quite easy to prove) in $O(log k)$.</p><p>Now that we find the gcd of the numerator and denominator, we can immediately find the reduced denominator by binary exponentiation. For the numerator, we need a bit more work, since we have to deal with (2<em>n</em> - 1)(2<em>n</em> - 2)…(2<em>n</em> - (<em>k</em> - 1)). However, it is not hard either. The key fact is that <em>MOD</em> is small, so if <em>k</em> - 1 ≥ <em>MOD</em>, the product above is equal to 0 modulo <em>MOD</em>, because among <em>MOD</em> consecutive integers there must be one that is a multiple of <em>MOD</em>. Thus, the above product can be calculated in <em>O</em>(<em>MOD</em>) if <em>k</em> - 1 ≤ <em>MOD</em> and <em>O</em>(1) otherwise. The remaining parts can be calculated using direct binary exponentiation.</p><p>One minor note is that when we’re calculating 2(<em>k</em> - 1)<em>n</em>, the value of (<em>k</em> - 1)<em>n</em> might overflow. One way to resolve this is to reduce it modulo <em>MOD</em> - 1, since 2^MOD-1^ ≡ 1 modulo <em>MOD</em> by Fermat’s Little Theorem. Another way is to just evaluate 2^k-1^ first, then take the result and raise it to the <em>n</em>-th power.</p><p>Time Complexity : $O(MOD+logk+logn)$</p><h2 id="Some-discoveries"><a href="#Some-discoveries" class="headerlink" title="Some discoveries"></a>Some discoveries</h2><p>The highest power of 2 that divides $n!$ is equal to n subtract the number of 1 in binary form of n.</p><h3 id="Legendre’s-formula"><a href="#Legendre’s-formula" class="headerlink" title="Legendre’s formula:"></a>Legendre’s formula:</h3><p>在正数n!的素因子标准分解式中，素数p的最高指数<br>$$<br>L_p(n!)&#x3D;\Sigma_{k\ge1}\lfloor\frac{n}{p^k}\rfloor<br>$$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span>#<span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll n,k;<br>ll a,a1,a2,cnt;<br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">1000003</span>;<br>ll res;<br><span class="hljs-function">ll <span class="hljs-title">fpw</span><span class="hljs-params">(ll x,ll a)</span></span>&#123;<br><span class="hljs-keyword">for</span>(res=<span class="hljs-number">1</span>;a;a&gt;&gt;=<span class="hljs-number">1</span>,(x*=x)%=mod)<span class="hljs-keyword">if</span>(a&amp;<span class="hljs-number">1</span>)(res*=x)%=mod;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br>ll den,num;<span class="hljs-comment">//denominator and numerator</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;k);<br><span class="hljs-keyword">for</span>(a=k<span class="hljs-number">-1</span>;a;a&gt;&gt;=<span class="hljs-number">1</span>)cnt++;<br><span class="hljs-keyword">if</span>(n&lt;cnt)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 1&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(a=cnt=k<span class="hljs-number">-1</span>;a;a&gt;&gt;=<span class="hljs-number">1</span>)<span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>&amp;a)cnt--;<br>den=<span class="hljs-built_in">fpw</span>(<span class="hljs-built_in">fpw</span>(<span class="hljs-number">2</span>,k<span class="hljs-number">-1</span>),n)*<span class="hljs-built_in">fpw</span>(<span class="hljs-built_in">fpw</span>(<span class="hljs-number">2</span>,mod<span class="hljs-number">-2</span>),cnt)%mod;<br><span class="hljs-keyword">if</span>(k<span class="hljs-number">-1</span>&gt;=mod)num=den;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">for</span>(a=<span class="hljs-built_in">fpw</span>(<span class="hljs-number">2</span>,n),i=num=<span class="hljs-number">1</span>;i&lt;=k<span class="hljs-number">-1</span>;i++)num=(a-i+mod)%mod*num%mod;<br>num=num*<span class="hljs-built_in">fpw</span>(<span class="hljs-built_in">fpw</span>(<span class="hljs-number">2</span>,mod<span class="hljs-number">-2</span>),cnt)%mod;<br>num=den-num&lt;<span class="hljs-number">0</span>?(mod-num+den)%mod:den-num;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld&quot;</span>,num,den);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Techniques"><a href="#Techniques" class="headerlink" title="Techniques"></a>Techniques</h1><h2 id="Inverse-element"><a href="#Inverse-element" class="headerlink" title="Inverse element"></a>Inverse element</h2><h3 id="Way1"><a href="#Way1" class="headerlink" title="Way1"></a>Way1</h3><blockquote><h3 id="Fermat’s-little-theorem"><a href="#Fermat’s-little-theorem" class="headerlink" title="Fermat’s little theorem"></a>Fermat’s little theorem</h3><p>$p$ is a prime, and $a$ isn’t a multiple of $p$, then<br>$$<br>a^{p-1}\equiv1 \pmod p<br>$$</p></blockquote><p>We can <code>deduce</code> from this that<br>$$<br>Inv_a&#x3D;a^{p-2}%p<br>$$</p><p>Using this, we can compute a inverse element of $a$ by &#x3D;&#x3D;fast power&#x3D;&#x3D; with modulo in $O(\log p)$</p><h3 id="Way2"><a href="#Way2" class="headerlink" title="Way2"></a>Way2</h3><p>Regard this congruence equation<br>$$<br>Inv_a<em>a\equiv1 \pmod p<br>$$<br>as another equation ($x&#x3D;Inv, b&#x3D;p$)<br>$$<br>a</em>Inv_a+p*any&#x3D;1<br>$$<br>then the only thing we need to do is that find a possible solution of the equation.</p><p>And, coincidentally, there is an algorithm <code>dedicated to</code> this kind of problem.</p><blockquote><h3 id="Exgcd"><a href="#Exgcd" class="headerlink" title="Exgcd"></a>Exgcd</h3><p>Quite evidently, $a$ and $p$ are coprime(according to Bézout’s identity which also called Bézout’s lemma),</p><p>and this algorithm is based on Euclid’s algorithm.<br>$$<br>\begin{align}<br>Final\ state:&amp;1<em>1+0</em>0&#x3D;1\ \ \ \text{i.e.}\ \ \ a&#x3D;1,b&#x3D;0,x&#x3D;1,y&#x3D;0\<br>Transfer:&amp;1&#x3D;a<em>x_0+b</em>y_0&#x3D;b<em>x_1+a%b</em>y_1&#x3D;b<em>x_1+(a-\lfloor\frac{a}{b}\rfloor</em>b)<em>y_1\<br>&amp;&#x3D;a</em>y_1+b*(x_1-\lfloor\frac{a}{b}\rfloor<em>y_1)\<br>That\ is:&amp;x_0\gets y_1\ \text{and}\ y_0\gets x_1-\lfloor\frac{a}{b}\rfloor</em>y_1<br>\end{align}<br>$$<br><strong>Code:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&gt;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span>&amp;x,<span class="hljs-type">int</span>&amp;y)</span></span>&#123;b?<span class="hljs-built_in">exgcd</span>(b,a%b,y,x),y-=a/b*x:(x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>);&#125;<br>&gt;<span class="hljs-built_in">exgcd</span>(a,p,inv,x);<br>&gt;(inv+=p)%=p;<br></code></pre></td></tr></table></figure><p>Must use recursive form.</p><p>By the way, there is a small optimization of gcd here.</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&gt;<span class="hljs-keyword">while</span><span class="hljs-comment">(b^=a^=b^=a%=b)</span>;<br></code></pre></td></tr></table></figure><p>than, a&#x3D;gcd(a,b);</p></blockquote><h3 id="Way3"><a href="#Way3" class="headerlink" title="Way3"></a>Way3</h3><p>$$<br>\begin{align}<br>&amp;p&#x3D;\lfloor\frac{p}{a}\rfloor<em>a+p%a\<br>\iff&amp;\lfloor\frac{p}{a}\rfloor</em>a\equiv-p%a\pmod p\<br>\iff&amp;a^{-1}\equiv(-p%a)^{-1}<em>\lfloor\frac{p}{a}\rfloor\equiv-\lfloor\frac{p}{a}\rfloor</em>(p%a)^{-1}\equiv(p-\lfloor\frac{p}{a}\rfloor)*(p%a)^{-1}\pmod p<br>\end{align}<br>$$</p><p>Since limited that $Inv$ must be positive, we must plus a $p$ before $-\lfloor\frac{p}{a}\rfloor$.</p><p>Therefore, we can deduce $Inv_a$ from $Inv_{p-p&#x2F;a}$.</p><p>By this way, we can calculate the inverse elements from 1~n in linear time.</p><p><strong>Code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(inv[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,i=<span class="hljs-number">2</span>;i&lt;p;i++)inv[i]=inv[p%i]*(p-p/i)%p;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[math]] [[combinatorics]] [[inverse_element]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/711/E&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;The-tuto</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/05/30/CF596E/"/>
    <id>http://example.com/2022/05/30/CF596E/</id>
    <published>2022-05-29T16:12:37.417Z</published>
    <updated>2022-05-23T15:03:59.697Z</updated>
    
    <content type="html"><![CDATA[<p>[[dfs]] [[trees_and_similar]]<br><a href="https://codeforces.com/problemset/problem/596/E">link</a></p><p>This matrix is equivalent to a forest of 基环树.</p><p>The task is to judge that there is or not a path we walk up contain the query sequence.</p><p>We don’t need to care about the numbers in the cycles, since we can turn any numbers of cycles.</p><p>So, we’d better reserve the query sequence.</p><p>Then, it’s a dfs problem that find a set of numbers on the nodes in a few trees.</p><h3 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h3><p>create connection</p><p>build reserve graph</p><p>find cycles</p><p>find roots below cycles</p><p>deal with queries</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">100005</span>;<br><span class="hljs-type">int</span> n,m,q,r[<span class="hljs-number">202</span>][<span class="hljs-number">202</span>],nt[N],nxt[N],t,h[N],to[N],num[N],dx[<span class="hljs-number">10</span>],dy[<span class="hljs-number">10</span>];<br><span class="hljs-type">char</span> a,qu[<span class="hljs-number">1000006</span>];<br><span class="hljs-type">int</span> cy[N],cyc,c,f[N],ind[N][<span class="hljs-number">10</span>],in_cyc[N];<br>vector&lt;<span class="hljs-type">int</span>&gt;ro[N];<br><span class="hljs-type">bool</span> fl,fla;<br><span class="hljs-type">int</span> uu,len,it;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>nxt[++t]=h[u],h[u]=t,to[t]=v;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">find_cycles</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br><span class="hljs-keyword">if</span>(cy[u])&#123;<br>fl=<span class="hljs-number">1</span>;c=cy[u];<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(f[u])&#123;<br>fl=<span class="hljs-number">1</span>;c=++cyc;<br>fla=<span class="hljs-number">1</span>;uu=u;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>f[u]=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">find_cycles</span>(nt[u]);<br><span class="hljs-keyword">if</span>(fl)cy[u]=c;<br><span class="hljs-keyword">if</span>(fla)&#123;<br>in_cyc[u]=ind[c][num[u]]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(u==uu)fla=<span class="hljs-number">0</span>;<br>&#125;<br>f[u]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br><span class="hljs-keyword">if</span>(num[u]==qu[it]-<span class="hljs-string">&#x27;0&#x27;</span>)it++;<br><span class="hljs-keyword">if</span>(it==len)&#123;<br>fl=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> e=h[u];e;e=nxt[e])&#123;<br><span class="hljs-built_in">dfs</span>(to[e]);<br><span class="hljs-keyword">if</span>(fl==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(num[u]==qu[it]-<span class="hljs-string">&#x27;0&#x27;</span>)it--;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(num[u]==qu[it]-<span class="hljs-string">&#x27;0&#x27;</span>)it--;<br>&#125;<br><span class="hljs-type">int</span> nx,ny;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>cin&gt;&gt;a;r[i][j]=a-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">9</span>;i++)cin&gt;&gt;dx[i]&gt;&gt;dy[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<span class="hljs-comment">//edge</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br>nx=i+dx[r[i][j]];<br>ny=j+dy[r[i][j]];<br><span class="hljs-keyword">if</span>(nx&lt;<span class="hljs-number">0</span>||nx&gt;=n||ny&lt;<span class="hljs-number">0</span>||ny&gt;=m)nt[m*i+j]=m*i+j;<br><span class="hljs-keyword">else</span> nt[m*i+j]=nx*m+ny;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<span class="hljs-comment">//reverse</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br><span class="hljs-built_in">add</span>(nt[i*m+j],i*m+j);<br>num[i*m+j]=r[i][j];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br><span class="hljs-keyword">if</span>(!cy[i*m+j])fl=<span class="hljs-number">0</span>,fla=<span class="hljs-number">0</span>,<span class="hljs-built_in">find_cycles</span>(i*m+j);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> e=h[i*m+j];e;e=nxt[e])&#123;<br><span class="hljs-keyword">if</span>(in_cyc[i*m+j]&amp;&amp;<span class="hljs-comment">/*&lt;-lost*/</span>!in_cyc[to[e]])ro[cy[i*m+j]].<span class="hljs-built_in">push_back</span>(to[e]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(;q--;)&#123;<br>cin&gt;&gt;qu;len=<span class="hljs-built_in">strlen</span>(qu);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">0</span>,b=len<span class="hljs-number">-1</span>;a&lt;b;a++,b--)qu[a]^=qu[b]^=qu[a]^=qu[b];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cyc;i++)&#123;<br><span class="hljs-keyword">for</span>(it=<span class="hljs-number">0</span>;it&lt;len&amp;&amp;ind[i][qu[it]-<span class="hljs-string">&#x27;0&#x27;</span>];it++);<br><span class="hljs-keyword">if</span>(it==len)&#123;cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-keyword">goto</span> out;&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> u:ro[i])&#123;<br>fl=<span class="hljs-number">0</span>,<span class="hljs-built_in">dfs</span>(u);<br><span class="hljs-keyword">if</span>(fl==<span class="hljs-number">1</span>)&#123;cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<span class="hljs-keyword">goto</span> out;&#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>out:;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[[dfs]] [[trees_and_similar]]&lt;br&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/596/E&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This matrix is equivalent to a</summary>
      
    
    
    
    
  </entry>
  
</feed>
