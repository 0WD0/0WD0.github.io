<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/05/30/%E6%9C%AA%E5%91%BD%E5%90%8D/"/>
      <url>/2022/05/30/%E6%9C%AA%E5%91%BD%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>$ npm install -g hexo-cli</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/P5121/"/>
      <url>/2022/05/30/P5121/</url>
      
        <content type="html"><![CDATA[<p>[[implementation]]<br><a href="https://www.luogu.com.cn/problem/P5121">link</a></p><pre><code>while(还有可以删的连通块)&#123;    找连通块，判断连通块大小，删除或不删；    掉落；&#125;</code></pre><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k,cnt,vis[<span class="number">111</span>][<span class="number">11</span>],li[<span class="number">1110</span>],dx[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;,dy[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,c,cn,la,ga;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">111</span>][<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">vis[x][y]=cn;c++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)<span class="keyword">if</span>(!vis[x+dx[i]][y+dy[i]]&amp;&amp;ch[x+dx[i]][y+dy[i]]==ch[x][y])<span class="built_in">dfs</span>(x+dx[i],y+dy[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)cin&gt;&gt;ch[i][j];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">cnt=cn=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(li,<span class="number">0</span>,<span class="keyword">sizeof</span> li);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)<span class="keyword">if</span>(!vis[i][j]&amp;&amp;ch[i][j]!=<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">cn++,c=<span class="number">0</span>,<span class="built_in">dfs</span>(i,j);</span><br><span class="line"><span class="keyword">if</span>(c&gt;=k)li[cn]=<span class="number">1</span>,cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)<span class="keyword">if</span>(li[vis[i][j]])ch[i][j]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(la=i=n;i&amp;&amp;ch[i][j]!=<span class="string">&#x27;0&#x27;</span>;i--,la--);</span><br><span class="line"><span class="keyword">for</span>(;i;)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i][j]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(;i&amp;&amp;ch[i][j]==<span class="string">&#x27;0&#x27;</span>;i--);</span><br><span class="line">ga=la-i;</span><br><span class="line"><span class="keyword">for</span>(;i&amp;&amp;ch[i][j]!=<span class="string">&#x27;0&#x27;</span>;i--)ch[i+ga][j]=ch[i][j],ch[i][j]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">la=i+ga;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!cnt)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;cout&lt;&lt;endl,i++)<span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)cout&lt;&lt;ch[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF1662N/"/>
      <url>/2022/05/30/CF1662N/</url>
      
        <content type="html"><![CDATA[<p>[[math]]<br><a href="https://codeforces.com/problemset/problem/1662/N">link</a></p><p>Let $a&lt;b&lt;c&lt;d$, ignoring the direction.<br>There are two passible situations:<br>$a$ $b$     |        $a$ $b$<br>$c$ $d$     |        $d$ $c$</p><p>That’s all.</p><p><em>Discovered what?</em></p><p>$b$ and $c$ must in the middle of the vertices near it.</p><p>And rectangles which aren’t eligible must don’t satisfy the description above.</p><p>And it’s doesn’t matter that whether “$b$” and “$c$” is in the same column or row or neither.</p><p>Therefore, the answer is the number of “$b$” (“$c$” and “$b$” have same features, so the answer should divided by 2).</p><p>We can use <code>sort()</code> and <code>lower_bound()</code> to compute the rank of $x_{i,j}$ in the column and row.</p><p>Complexity: $O(n^2\log n)$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1502</span>;</span><br><span class="line"><span class="type">int</span> n,m,x[N][N],b[N],prel[N][N],sufl[N][N],prec[N][N],sufc[N][N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">cin&gt;&gt;x[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)b[j]=x[i][j];<span class="built_in">sort</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)prel[i][j]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+n,x[i][j])-b<span class="number">-1</span>,sufl[i][j]=n-prel[i][j]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)b[j]=x[j][i];<span class="built_in">sort</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)prec[j][i]=<span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+<span class="number">1</span>+n,x[j][i])-b<span class="number">-1</span>,sufc[j][i]=n-prec[j][i]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">ans+=prel[i][j]*sufc[i][j]+prec[i][j]*sufl[i][j];</span><br><span class="line">fout&lt;&lt;ans/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I’m-the-first-solver-of-this-problem-in-CF"><a href="#I’m-the-first-solver-of-this-problem-in-CF" class="headerlink" title="I’m the first solver of this problem in CF!"></a>I’m the first solver of this problem in CF!</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF1662L/"/>
      <url>/2022/05/30/CF1662L/</url>
      
        <content type="html"><![CDATA[<p>[[DP]] [[conversion]]<br><a href="https://codeforces.com/problemset/problem/1662/L">link</a></p><h2 id="Tutorial-on-CF"><a href="#Tutorial-on-CF" class="headerlink" title="Tutorial on CF"></a>Tutorial on CF</h2><p>Let $x_i:&#x3D;vt_i−a_i$ and $y_i:&#x3D;vt_i+a_i$ for $i&#x3D;1,…,n$. The main observation to solve this problem is that a sequence of kicks with indices $i_1,…,i_k$ can be seen (in this order and starting from the first one) if and only if both sequences $x_{i_1},…,x_{i_k}$ and $y_{i_1},…,y_{i_k}$ are nondecreasing. To see this, observe that<br>$$<br>x_i≤x_j⟺vt_i−a_i≤vt_j−a_j⟺a_j−a_i≤v(t_j−t_i)<br>$$</p><p>and<br>$$<br>y_i≤y_j⟺vt_i+a_i≤vt_j+a_j⟺a_i−a_j≤v(t_j−t_i)<br>$$<br>Moreover<br>$$<br>t_i&#x3D;\frac{x_i+y_i}{2v}<br>$$<br>so if both sequences are nondecreasing, then their corresponding times are in increasing order and it holds that $|a_{i_ℓ}+1−a_{i_ℓ}|≤v(t_{i_ℓ}+1−t_{i_ℓ})$, which means that each event can be reached from the previous one. The converse is clear from the previous inequalities.</p><p>In order to impose the condition that the events can be reached starting from position 00 at time 00, it is enough to remove all points which cannot be reached from the origin, that is, with $|ai|&gt;vti$. We will assume that these events have been eliminated and still denote by $n$ the total number of events.</p><p>We have thus reduced the problem to finding the longest increasing subsequence of the $y$-values when ordered by increasing xx-value. More precisely, let $(p_1,…,p_n)$ be the permutation of $(1,…,n)$ such that</p><p>$i&lt;j⟹x_{p_i}&lt;x_{p_j}\ \text{or}\ (x_{p_i}&#x3D;x_{p_j}\ \text{and}\ y_{p_i}&lt;y_{p_j})$.</p><p>Then the solution of the problem is the length of the longest (non-strictly) increasing subsequence of the list $y_{p_1},…,y_{p_n}$.</p><p>There are classical algorithms to solve this efficiently in $O(n\log n)$ time. For instance, this complexity is achieved by an approach that processes the elements from left to right and uses binary searches to update the value of the smallest possible last element of a length-$k$ increasing subsequence in every prefix for every $k$.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll t[N],a[N],n,v,nn;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>&#123;ll x,y;&#125;_[N];</span><br><span class="line">ll dp[N],u;</span><br><span class="line"><span class="type">int</span> top;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;v);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;t[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(<span class="built_in">abs</span>(a[i])&lt;=v*t[i])_[++nn]=&#123;t[i]*v+a[i],t[i]*v-a[i]&#125;;n=nn;</span><br><span class="line"><span class="built_in">sort</span>(_+<span class="number">1</span>,_+<span class="number">1</span>+n,[](A a,A b)&#123;<span class="keyword">return</span> a.x&lt;b.x||(a.x==b.x&amp;&amp;a.y&lt;b.y);&#125;);<span class="comment">//lambda</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>((u=_[i].y)&gt;=dp[top])dp[++top]=u;</span><br><span class="line"><span class="keyword">else</span> dp[<span class="built_in">upper_bound</span>(dp+<span class="number">1</span>,dp+<span class="number">1</span>+top,u)-dp]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,top);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF1662I/"/>
      <url>/2022/05/30/CF1662I/</url>
      
        <content type="html"><![CDATA[<p>[[implementation]]<br><a href="https://codeforces.com/problemset/problem/1662/I">link</a></p><p>Three cases:</p><ol><li>The leftmost</li><li>In the middle</li><li>The rightmost</li></ol><p>In the sides, we can get everyone.</p><p>In the middle, we can only get people in a range of the half of the distance between the nearest shops. Use two pointers.</p><p>Although the process is simple, the code is full of details.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> n,m,p[N],x[N];</span><br><span class="line"><span class="type">int</span> range,l,r;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans,an;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;p[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)cin&gt;&gt;x[i];</span><br><span class="line"><span class="built_in">sort</span>(x+<span class="number">1</span>,x+<span class="number">1</span>+m);n--;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n&amp;&amp;i*<span class="number">100</span>&lt;x[<span class="number">1</span>];i++)ans+=p[i];</span><br><span class="line"><span class="keyword">for</span>(i=x[m]/<span class="number">100</span>+<span class="number">1</span>;i&lt;=n;i++)an+=p[i];ans=<span class="built_in">max</span>(ans,an);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;x[i]&lt;n*<span class="number">100</span>&amp;&amp;i&lt;m;i++)&#123;</span><br><span class="line">range=(x[i+<span class="number">1</span>]-x[i])/<span class="number">2</span>/<span class="number">100</span>;</span><br><span class="line">l=r=x[i]/<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(an=<span class="number">0</span>;r&lt;=n&amp;&amp;r*<span class="number">100</span>&lt;x[i+<span class="number">1</span>]&amp;&amp;r-l&lt;=range;r++)an+=p[r];</span><br><span class="line">ans=<span class="built_in">max</span>(ans,an);</span><br><span class="line"><span class="keyword">for</span>(;r&lt;=n&amp;&amp;r*<span class="number">100</span>&lt;x[i+<span class="number">1</span>];r++,l++)&#123;</span><br><span class="line">an-=p[l],an+=p[r];</span><br><span class="line">ans=<span class="built_in">max</span>(ans,an);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF1662D/"/>
      <url>/2022/05/30/CF1662D/</url>
      
        <content type="html"><![CDATA[<p>[[string]] [[thinking]]<br><a href="https://codeforces.com/problemset/problem/1662/D">link</a></p><p>$AA$ $BB$ $ABAB$ $BCBC$ are given, ask whether string $a$ can become string $b$.</p><p>Inserting and deleting at any position are approved.</p><h2 id="Sol"><a href="#Sol" class="headerlink" title="Sol"></a>Sol</h2><p>Firstly, the parity of the occurrences of $A$, $B$ and $C$ are same in $a$ and $b$.</p><p>Then, we can transform the string $AB$ to the string $BA$ via the following sequence of moves:</p><blockquote><p>Start with $AB$, then insert $BB$ at the back of the string to get $ABBB$, then insert the string $ABAB$ in the second to last position to get $ABBABABB$.</p><p>Removing the two occurrences of $BB$ we get the string $AABA$ and then removing $AA$ we get to $BA$.</p></blockquote><p>Similarly,  we can transform the string $BC$ to the string $CB$.</p><p>Therefor, $B$ is movable and their positions are of no great importance.</p><p>$A$ and $C$ is immovable, so I only need to compare the string consist of $A$ and $C$.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> t,la,lb,pa,pb,pc;</span><br><span class="line">string a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(;t--;)&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">la=a.<span class="built_in">length</span>();</span><br><span class="line">lb=b.<span class="built_in">length</span>();</span><br><span class="line">pa=pb=pc=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;la;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">&#x27;A&#x27;</span>)pa^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">&#x27;B&#x27;</span>)pb^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">&#x27;C&#x27;</span>)pc^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lb;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i]==<span class="string">&#x27;A&#x27;</span>)pa^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(b[i]==<span class="string">&#x27;B&#x27;</span>)pb^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(b[i]==<span class="string">&#x27;C&#x27;</span>)pc^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pa||pb||pc)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;la;i++)<span class="keyword">if</span>(a[i]==<span class="string">&#x27;B&#x27;</span>)a.<span class="built_in">erase</span>(i,<span class="number">1</span>),la--,i--;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lb;i++)<span class="keyword">if</span>(b[i]==<span class="string">&#x27;B&#x27;</span>)b.<span class="built_in">erase</span>(i,<span class="number">1</span>),lb--,i--;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;la<span class="number">-1</span>;i++)<span class="keyword">if</span>(a[i]==a[i+<span class="number">1</span>])a.<span class="built_in">erase</span>(i,<span class="number">2</span>),i=<span class="built_in">max</span>(<span class="number">-1</span>,i<span class="number">-2</span>),la-=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lb<span class="number">-1</span>;i++)<span class="keyword">if</span>(b[i]==b[i+<span class="number">1</span>])b.<span class="built_in">erase</span>(i,<span class="number">2</span>),i=<span class="built_in">max</span>(<span class="number">-1</span>,i<span class="number">-2</span>),lb-=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a==b)<span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="string-in-STL"><a href="#string-in-STL" class="headerlink" title="string in STL"></a><a href="string.md">string in STL</a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF1201D/"/>
      <url>/2022/05/30/CF1201D/</url>
      
        <content type="html"><![CDATA[<p>[[DP]]<br><a href="https://codeforces.com/problemset/problem/1201/D">link</a></p><p>We must visit every single treasure (um, and the coordinate $(1,1)$ ,the starting point).</p><p>It’s easy to find that the position where you leave is must be the leftmost or the rightmost point.</p><p>Obviously, this is a DP problem.</p><p>A floor has two nodes, but it can only transfer from the last floor, so the states is $dp[2][2]$.</p><p>Then the most important thing is calculate the cost:</p><blockquote><p>From the lower left to the upper left</p><p>From the lower left to the upper right</p><p>From the lower right to the upper left</p><p>From the lower right to the upper right</p><p>And every point at most has two ladder to move upward, a right and a left.</p><p>And after you move upward, there are two sides you could choose to go, a right and a left as well.</p></blockquote><p>So totally, there are 16 situations.</p><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">300005</span>,inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,q;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="type">int</span> mi[N],ma[N];</span><br><span class="line"><span class="type">int</span> d[N],pre[N],suf[N],pr,su;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">2</span>][<span class="number">2</span>],ans,val[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> t,top;</span><br><span class="line"><span class="type">bool</span> b;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> _,<span class="type">int</span> p,<span class="type">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(top=t;!ma[t]&amp;&amp;t&lt;=n;t++);</span><br><span class="line"><span class="keyword">if</span>(t==n+<span class="number">1</span>)&#123;</span><br><span class="line">ans=<span class="built_in">min</span>(dp[b][<span class="number">0</span>],dp[b][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,top<span class="number">-2</span>+ans);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p&lt;=mi[t])&#123;</span><br><span class="line">val[_][<span class="number">0</span>]=<span class="built_in">min</span>(val[_][<span class="number">0</span>],inf);</span><br><span class="line">val[_][<span class="number">1</span>]=<span class="built_in">min</span>(val[_][<span class="number">1</span>],a+ma[t]-p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p&gt;=ma[t])&#123;</span><br><span class="line">val[_][<span class="number">1</span>]=<span class="built_in">min</span>(val[_][<span class="number">1</span>],inf);</span><br><span class="line">val[_][<span class="number">0</span>]=<span class="built_in">min</span>(val[_][<span class="number">0</span>],a+p-mi[t]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">val[_][<span class="number">0</span>]=<span class="built_in">min</span>(a+ma[t]-p+ma[t]-mi[t],val[_][<span class="number">0</span>]);</span><br><span class="line">val[_][<span class="number">1</span>]=<span class="built_in">min</span>(a+p-mi[t]+ma[t]-mi[t],val[_][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="type">int</span> i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)mi[i]=m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(mi[x]&gt;y)mi[x]=y;</span><br><span class="line"><span class="keyword">if</span>(ma[x]&lt;y)ma[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x),d[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[i])pr=i;</span><br><span class="line">pre[i]=pr;</span><br><span class="line">&#125;</span><br><span class="line">su=m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=m;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[i])su=i;</span><br><span class="line">suf[i]=su;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ma[<span class="number">1</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>]=ma[<span class="number">1</span>]<span class="number">-1</span>;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> mi[<span class="number">1</span>]=ma[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//&lt;&lt;</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i=t,b^=<span class="number">1</span>)&#123;</span><br><span class="line">t=i+<span class="number">1</span>;val[<span class="number">0</span>][<span class="number">0</span>]=val[<span class="number">0</span>][<span class="number">1</span>]=val[<span class="number">1</span>][<span class="number">0</span>]=val[<span class="number">1</span>][<span class="number">1</span>]=inf;</span><br><span class="line"><span class="keyword">if</span>(suf[mi[i]]!=mi[i]&amp;&amp;pre[mi[i]]!=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">cal</span>(<span class="number">0</span>,pre[mi[i]],mi[i]-pre[mi[i]]);</span><br><span class="line"><span class="keyword">if</span>(suf[mi[i]]!=m+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">cal</span>(<span class="number">0</span>,suf[mi[i]],suf[mi[i]]-mi[i]);</span><br><span class="line"><span class="keyword">if</span>(suf[ma[i]]!=ma[i]&amp;&amp;pre[ma[i]]!=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">cal</span>(<span class="number">1</span>,pre[ma[i]],ma[i]-pre[ma[i]]);</span><br><span class="line"><span class="keyword">if</span>(suf[ma[i]]!=m+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">cal</span>(<span class="number">1</span>,suf[ma[i]],suf[ma[i]]-ma[i]);</span><br><span class="line">dp[b^<span class="number">1</span>][<span class="number">0</span>]=<span class="built_in">min</span>(val[<span class="number">0</span>][<span class="number">0</span>]+dp[b][<span class="number">0</span>],val[<span class="number">1</span>][<span class="number">0</span>]+dp[b][<span class="number">1</span>]);</span><br><span class="line">dp[b^<span class="number">1</span>][<span class="number">1</span>]=<span class="built_in">min</span>(val[<span class="number">0</span>][<span class="number">1</span>]+dp[b][<span class="number">0</span>],val[<span class="number">1</span>][<span class="number">1</span>]+dp[b][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF1152D/"/>
      <url>/2022/05/30/CF1152D/</url>
      
        <content type="html"><![CDATA[<p>[[DP]]<br><a href="https://codeforces.com/contest/1152/problem/D">link</a></p><h2 id="What’s-the-max-matching-on-a-tree"><a href="#What’s-the-max-matching-on-a-tree" class="headerlink" title="What’s the max matching on a tree?"></a>What’s the max matching on a tree?</h2><p>A simple DP!</p><h2 id="Compress-states"><a href="#Compress-states" class="headerlink" title="Compress states"></a>Compress states</h2><p>If we draw out the whole trie, well, we’ll get $2^{1000}$ nodes.<br>So how could we handle it? We should compress the states.</p><p>Imagine that there is a matrix $A$.<br>$A_{i,j}$ means there are $i$ ‘(‘ edges and $j$ ‘)’ edges on the path from this node to the root.<br>(which also means there are $n-i$ ‘(‘ edges and $n-j$ ‘)’ edges on the path from this node to the leaves)<br><em>PS: Cause we must make the bracket sequences correct, $i$ must bigger than $j$.</em></p><p>Than move the DP on trees to matrix.</p><h1 id="The-state-transfer-equation-is"><a href="#The-state-transfer-equation-is" class="headerlink" title="The state transfer equation is:"></a>The state transfer equation is:</h1><p>$$<br>\begin{align*}<br>&amp;f[i][j]&#x3D;\begin{cases}<br>g[i+1][j]+max(g[i][j+1],f[i][j+1])+1, &amp;g[i+1]&gt;g[i][j+1]\<br>g[i][j+1]+max(g[i+1][j],f[i+1][j])+1, &amp;g[i+1]&lt;&#x3D;g[i][j+1]\<br>\end{cases}\<br>&amp;g[i][j]&#x3D;max(f[i+1][j],g[i+1][j])+max(g[i][j+1],f[i][j+1])<br>\end{align*}<br>$$</p><p>$f[i][j]$ is the state that this node have a match edge to his children.</p><p>$g[i][j]$ haven’t.</p><h1 id="CODE"><a href="#CODE" class="headerlink" title="CODE:"></a>CODE:</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1003</span>,M=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> f[N][N],g[N][N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);n++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=n;j&gt;=i;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">f[i][j]=g[i][j+<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">g[i][j]=<span class="built_in">max</span>(g[i][j+<span class="number">1</span>],f[i][j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j==n)&#123;</span><br><span class="line">f[i][j]=g[i+<span class="number">1</span>][j]+<span class="number">1</span>;</span><br><span class="line">g[i][j]=<span class="built_in">max</span>(g[i+<span class="number">1</span>][j],f[i+<span class="number">1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(g[i+<span class="number">1</span>][j]&gt;g[i][j+<span class="number">1</span>])f[i][j]=(g[i+<span class="number">1</span>][j]+<span class="built_in">max</span>(g[i][j+<span class="number">1</span>],f[i][j+<span class="number">1</span>])+<span class="number">1</span>)%M;</span><br><span class="line"><span class="keyword">else</span> f[i][j]=(g[i][j+<span class="number">1</span>]+<span class="built_in">max</span>(g[i+<span class="number">1</span>][j],f[i+<span class="number">1</span>][j])+<span class="number">1</span>)%M;</span><br><span class="line">g[i][j]=(<span class="built_in">max</span>(f[i+<span class="number">1</span>][j],g[i+<span class="number">1</span>][j])+<span class="built_in">max</span>(g[i][j+<span class="number">1</span>],f[i][j+<span class="number">1</span>]))%M;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">max</span>(f[<span class="number">1</span>][<span class="number">1</span>],g[<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF959D/"/>
      <url>/2022/05/30/CF959D/</url>
      
        <content type="html"><![CDATA[<p>[[math]]<br><a href="https://codeforces.com/problemset/problem/959/D">link</a></p><blockquote><ul><li>$b$ is lexicographically greater than or equal to $a$.</li><li>$b_i ≥2$.</li><li>$b$ is pairwise coprime: for every $1 ≤ i &lt; j ≤ n$,  $b_i$ and $b_j$ are coprime</li></ul></blockquote><p>If $i&lt;j,b_i&gt;b_j$,  $b$ is lexicographically greater than or equal to $a$, then swap $b_i$ and $b_j$, the set of numbers of $b$ is the same.</p><p>Therefore, $b$ is increasing.<br>Every time we choose the number of $b_i$, must choose the minimum value that meets the condition.</p><p>So, what the requirement means?</p><p>First, $b_i&#x3D;a_i$, until $b_i$ can’t equal to $a_i$, must bigger.($\gcd(b_i,a_j)!&#x3D;1, j&lt;i$)<br>We can reach that by sieve method.</p><p>Later, we don’t need to care about lexicographically greater, which means we don’t need to care about $a$.</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2000000</span>;</span><br><span class="line"><span class="type">int</span> n,a,aa,b,v[N+<span class="number">5</span>],f,P[N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; p;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=N;i+=x)<span class="keyword">if</span>(!v[i])v[i]=<span class="number">1</span>,p.<span class="built_in">erase</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N;i++)&#123;</span><br><span class="line">p.<span class="built_in">insert</span>(i);</span><br><span class="line"><span class="keyword">if</span>(!v[i])P[++P[<span class="number">0</span>]]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=P[<span class="number">0</span>]&amp;&amp;i*P[j]&lt;=N;j++)&#123;</span><br><span class="line">v[i*P[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%P[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span> v);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">1</span>;o&lt;=n;o++)&#123;</span><br><span class="line">b=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line"><span class="keyword">if</span>(f)it=p.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">it=p.<span class="built_in">lower_bound</span>(a);</span><br><span class="line"><span class="keyword">if</span>(*it!=a)f=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*it);</span><br><span class="line">aa=a=*it;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;P[i]*P[i]&lt;=aa;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a%P[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!v[P[i]])<span class="built_in">update</span>(P[i]);</span><br><span class="line"><span class="keyword">for</span>(;a%P[i]==<span class="number">0</span>;a/=P[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a!=<span class="number">1</span>&amp;&amp;!v[a])<span class="built_in">update</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF894B/"/>
      <url>/2022/05/30/CF894B/</url>
      
        <content type="html"><![CDATA[<p>[[math]]<br><a href="https://codeforces.com/problemset/problem/894/B">link</a></p><p>First, it’s obvious that the numbers put can be only 1 or -1.</p><p>If k equals to -1 and the parity of n and m differ, the answer is obviously 0.</p><blockquote><p>Assume that $n$ is even and $m$ is even, the count of -1 equals to $n<em>odd$ (even) and $m</em>odd$ (odd), and it is impassible to be odd and even at the same time.</p></blockquote><p>Otherwise, for the first n-1 lines and the first m-1 columns, we can put either 1 or -1 in it,<br>and there’re $2^{(n - 1) * (m-1)}$ ways in total.</p><p> Then it’s obvious that the remaining numbers are uniquely determined because the product of each row and each column is known already.</p><p>So in this case the answer is $2^{(n - 1) * (m-1)}$ .</p><p>We can use fast power, which is easy.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll n,m,ret;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="function">ll <span class="title">fp</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(ret=<span class="number">1</span>;a;a&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(a&amp;<span class="number">1</span>)(ret*=x)%=mod;</span><br><span class="line">(x*=x)%=mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">if</span>(!~k&amp;&amp;(n&amp;<span class="number">1</span>)!=(m&amp;<span class="number">1</span>))<span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>),<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">fp</span>(<span class="built_in">fp</span>(<span class="number">2</span>,n<span class="number">-1</span>),m<span class="number">-1</span>));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>(If the code is very long, I’ll leave a link.)</p><p>2022.3.28</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF869D/"/>
      <url>/2022/05/30/CF869D/</url>
      
        <content type="html"><![CDATA[<p>[[dfs]] [[trees_and_similar]]<br><a href="https://codeforces.com/problemset/problem/869/D">link</a></p><p>At first, I felt confused about the description.</p><p>calculate the number of simple paths in a completed binary tree with a few extra edges? n&lt;1e9!?</p><p>O(n) is unacceptable.</p><p>Then, I tried to compress the nodes. But after I compressed them, I have way to calculate the number of simple paths.</p><p>I’ve read the tutorial.</p><h2 id="How-to-compress-a-tree-with-only-a-few-extra-edges"><a href="#How-to-compress-a-tree-with-only-a-few-extra-edges" class="headerlink" title="How to compress a tree with only a few extra edges?"></a>How to compress a tree with only a few extra edges?</h2><p>With one extra edge? 基环树。</p><p>What about more edge? 多环树？Name isn’t important.</p><p>Find out the graph consisting of cycles.</p><p>Every node can represent the tree below it, so the small tree is able to be compressed to the root.</p><hr><p>At last, calculate the number of simple paths is a simple dfs problem.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">500</span>,M=<span class="number">2000</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> n,m,h[N],nxt[M],to[M],t,a,b;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">nxt[++t]=h[u],h[u]=t,to[t]=v;</span><br><span class="line">nxt[++t]=h[v],h[v]=t,to[t]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> it;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;I;</span><br><span class="line"><span class="type">int</span> vis[N];</span><br><span class="line">[[define]] pb push_back</span><br><span class="line"><span class="type">int</span> d,rem;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,_=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(it=u;it;_++,it&gt;&gt;=<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(it=u;(it&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)&lt;=n;it=it&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);r=it;</span><br><span class="line"><span class="keyword">for</span>(it=u;(it&lt;&lt;<span class="number">1</span>)&lt;=n;it=it&lt;&lt;<span class="number">1</span>);l=it;</span><br><span class="line"><span class="keyword">if</span>(r&gt;n-rem)<span class="keyword">return</span> (<span class="number">1</span>&lt;&lt;d-_+<span class="number">1</span>)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&lt;=n-rem)<span class="built_in">return</span> (<span class="number">1</span>&lt;&lt;d-_)<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">return</span> (<span class="number">1</span>&lt;&lt;d-_)+n-l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> num[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> tot,ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">vis[u]=<span class="number">1</span>;tot+=num[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> e=h[u],v;e;e=nxt[e])</span><br><span class="line"><span class="keyword">if</span>(!vis[v=to[e]])<span class="built_in">dfs</span>(v);</span><br><span class="line">vis[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x[<span class="number">5</span>],y[<span class="number">5</span>],u,v;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">id</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!I[num])I[num]=I.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">return</span> I[num];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="number">1ll</span>*n*n%mod);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(it=n;it;it&gt;&gt;=<span class="number">1</span>)d++;</span><br><span class="line">rem=n-(<span class="number">1</span>&lt;&lt;d<span class="number">-1</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line"><span class="keyword">for</span>(it=x[i];it;it&gt;&gt;=<span class="number">1</span>)<span class="built_in">id</span>(it);</span><br><span class="line"><span class="keyword">for</span>(it=y[i];it;it&gt;&gt;=<span class="number">1</span>)<span class="built_in">id</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p:I)<span class="keyword">if</span>(p.first!=<span class="number">1</span>)<span class="built_in">add</span>(p.second,I[p.first&gt;&gt;<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p:I)num[p.second]=<span class="built_in">cal</span>(p.first);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p:I)&#123;</span><br><span class="line">fa=I[p.first&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> e=h[u=p.second];e;e=nxt[e])</span><br><span class="line"><span class="keyword">if</span>(!vis[v=to[e]]&amp;&amp;v!=fa)</span><br><span class="line">num[u]-=num[v],vis[v]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="built_in">add</span>(I[x[i]],I[y[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p:I)&#123;</span><br><span class="line">tot=<span class="number">0</span>;<span class="built_in">dfs</span>(p.second);</span><br><span class="line">ans=(ans+tot*num[p.second]%mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF862D/"/>
      <url>/2022/05/30/CF862D/</url>
      
        <content type="html"><![CDATA[<p>[[interactive]] [[divide_and_conquer]]<br><a href="https://codeforces.com/problemset/problem/862/D">link</a></p><p>We are allowed to query 15 times, and n&lt;1000.<br>Obviously, use &#x3D;&#x3D;divide and conquer&#x3D;&#x3D; algorithm.</p><h3 id="A-small-conclusion"><a href="#A-small-conclusion" class="headerlink" title="A small conclusion"></a>A small conclusion</h3><p>Make $h(1,n)$ represent the Hamming distance from 1 to n.</p><p>x is the number before altering, y is after.</p><p>We change 0&#x2F;1 within the range of 1~mid.<br>$$<br>\begin{cases}<br>&amp;x&#x3D;h(1,n)&#x3D;h(1,m)+h(m+1,r)\<br>&amp;y&#x3D;h’(1,m)+h(m+1,r)&#x3D;(m-l+1-h(1,m))+h(m+1,r)\<br>\end{cases}<br>\<br>\iff<br>\<br>\begin{cases}<br>&amp;h(l,m)&#x3D;(x-y-(m-l+1))&#x2F;2\<br>&amp;h(m+1,r)&#x3D;(x+y+(m-l+1))&#x2F;2<br>\end{cases}<br>$$</p><hr><p>Then, we can use $h1[2]$, $h2[2]$ to represent the number of number 0 or 1 in two sides.</p><p>If one side is full of 1 or full of 0. The next goal is to find the another number in the other side.</p><p>If both sides have 1 and 0, choose either side to continue to divide and conquer.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,o[<span class="number">1003</span>],h1[<span class="number">2</span>],h2[<span class="number">2</span>],x[<span class="number">2</span>],y,h;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;? &quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,o[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">fflush</span>(stdout);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;! %d %d&quot;</span>,ans[<span class="number">0</span>],ans[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">to1</span><span class="params">(<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">x[<span class="number">0</span>]=h1[<span class="number">0</span>],x[<span class="number">1</span>]=h1[<span class="number">1</span>];</span><br><span class="line">h+=h2[f];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">to2</span><span class="params">(<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">x[<span class="number">0</span>]=h2[<span class="number">0</span>],x[<span class="number">1</span>]=h2[<span class="number">1</span>];</span><br><span class="line">h+=h1[f^<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dc</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> m=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=m;i++)o[i]=f;</span><br><span class="line"><span class="built_in">print</span>();<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;y);</span><br><span class="line">y-=h;</span><br><span class="line">h1[f]=(x[f]-y+(m-l+<span class="number">1</span>))/<span class="number">2</span>;<span class="comment">//the number of f</span></span><br><span class="line">h1[f^<span class="number">1</span>]=m-l+<span class="number">1</span>-h1[f];</span><br><span class="line">h2[f]=(x[f]+y-(m-l+<span class="number">1</span>))/<span class="number">2</span>;</span><br><span class="line">h2[f^<span class="number">1</span>]=r-m-h2[f];</span><br><span class="line"><span class="keyword">if</span>(!ans[<span class="number">0</span>]&amp;&amp;!ans[<span class="number">1</span>])&#123;</span><br><span class="line"><span class="keyword">if</span>(h1[f]==m-l+<span class="number">1</span>||h1[f]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(h1[f]==m-l+<span class="number">1</span>)ans[f]=l;</span><br><span class="line"><span class="keyword">if</span>(h1[f]==<span class="number">0</span>)ans[f^<span class="number">1</span>]=l;</span><br><span class="line"><span class="built_in">to2</span>(f);<span class="built_in">dc</span>(m+<span class="number">1</span>,r,f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(h2[f]==r-m)ans[f]=r;</span><br><span class="line"><span class="keyword">if</span>(h2[f]==<span class="number">0</span>)ans[f^<span class="number">1</span>]=r;</span><br><span class="line"><span class="built_in">to1</span>(f);<span class="built_in">dc</span>(l,m,f^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)<span class="keyword">if</span>(!ans[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(h1[i]==m-l+<span class="number">1</span>)ans[i]=l,<span class="built_in">end</span>();</span><br><span class="line"><span class="keyword">if</span>(h2[i]==r-m)ans[i]=r,<span class="built_in">end</span>();</span><br><span class="line"><span class="keyword">if</span>(!h1[i])<span class="built_in">to2</span>(f),<span class="built_in">dc</span>(m+<span class="number">1</span>,r,f);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">to1</span>(f),<span class="built_in">dc</span>(l,m,f^<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">print</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x[<span class="number">1</span>]);x[<span class="number">0</span>]=n-x[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">dc</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF814D/"/>
      <url>/2022/05/30/CF814D/</url>
      
        <content type="html"><![CDATA[<p>[[DP]]<br><a href="https://codeforces.com/problemset/problem/814/D">link</a></p><p>The circles are shaped like a tree(or forest).</p><p>n&lt;1000, consider DP.</p><p>We can find that if the parity of both sides is fixed, whether the next number is - or + is fixed.</p><p>By this way, we can use $u$,$0&#x2F;1$,$0&#x2F;1$ as the state.<br>$$<br>g[i][j]&#x3D;f[v][i][j]\<br>f[u][i][j]&#x3D;max\begin{cases}g[i\oplus1][j]+val[u]<em>(i&#x3D;&#x3D;0?1:-1)\<br>g[i][j\oplus1]+val[u]</em>(j&#x3D;&#x3D;0?1:-1)<br>\end{cases}<br>$$<br>We must control the plus or minus sign by hand, so that the area can be right.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1003</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">O</span>&#123;</span><br><span class="line">ll x,y,r;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> O&amp;a)<span class="type">const</span>&#123;<span class="keyword">return</span> r&lt;a.r;&#125;</span><br><span class="line">&#125;nd[N];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x(i) nd[i].x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y(i) nd[i].y</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> r(i) nd[i].r</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;e[N];</span><br><span class="line"><span class="type">int</span> que[N],l,r,fa[N],u;</span><br><span class="line">ll f[N][<span class="number">2</span>][<span class="number">2</span>],g[<span class="number">2</span>][<span class="number">2</span>],ans;<span class="comment">//0-&gt;odd 1-&gt;even</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> Pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="type">int</span> deg[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;<span class="built_in">x</span>(i),&amp;<span class="built_in">y</span>(i),&amp;<span class="built_in">r</span>(i));</span><br><span class="line"><span class="built_in">sort</span>(nd+<span class="number">1</span>,nd+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].<span class="built_in">empty</span>())que[++r]=i;</span><br><span class="line"><span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">x</span>(i)-<span class="built_in">x</span>(j))*(<span class="built_in">x</span>(i)-<span class="built_in">x</span>(j))+(<span class="built_in">y</span>(i)-<span class="built_in">y</span>(j))*(<span class="built_in">y</span>(i)-<span class="built_in">y</span>(j))&lt;<span class="built_in">r</span>(j)*<span class="built_in">r</span>(j))&#123;</span><br><span class="line">fa[i]=j,e[j].<span class="built_in">push_back</span>(i),deg[j]++;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(l=<span class="number">1</span>;l&lt;=r;l++)&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[u=que[l]]&amp;&amp;--deg[fa[u]]==<span class="number">0</span>)que[++r]=fa[u];</span><br><span class="line">g[<span class="number">0</span>][<span class="number">0</span>]=g[<span class="number">1</span>][<span class="number">0</span>]=g[<span class="number">1</span>][<span class="number">1</span>]=g[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> v:e[u])</span><br><span class="line">g[i][j]+=f[v][i][j]; </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)</span><br><span class="line">f[u][i][j]=<span class="built_in">max</span>(g[i^<span class="number">1</span>][j]+<span class="built_in">r</span>(u)*<span class="built_in">r</span>(u)*(i==<span class="number">0</span>?<span class="number">1</span>:<span class="number">-1</span>),g[i][j^<span class="number">1</span>]+<span class="built_in">r</span>(u)*<span class="built_in">r</span>(u)*(j==<span class="number">0</span>?<span class="number">1</span>:<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(!fa[i])ans+=f[i][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.8lf&quot;</span>,ans*Pi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF814C/"/>
      <url>/2022/05/30/CF814C/</url>
      
        <content type="html"><![CDATA[<p>[[DP]]<br><a href="https://codeforces.com/contest/814/problem/C">link</a></p><p>How stupid of me!<br>I couldn’t find the possible time complexity at the first time.<br>Just look at the data range, $n&lt;1500$, $q&lt;200000$.<br>Obviously, $O(nq)$ is impossible, but I thought about it for a long time.</p><p>Maybe $O(n^2+q)$?</p><p>We need O(1) query, so we must store every possible query.</p><p>Use DP(dynamic programming).</p><p>Optimizing to 2D (without $|\Sigma|$) is possible, but not necessary.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,q,ans[<span class="number">26</span>][<span class="number">2003</span>],cost[<span class="number">26</span>],x;</span><br><span class="line"><span class="type">char</span> o[<span class="number">2003</span>],c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;o+<span class="number">1</span>&gt;&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(cost,<span class="number">0</span>,<span class="keyword">sizeof</span> cost);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;<span class="number">26</span>;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(k==o[j]-<span class="string">&#x27;a&#x27;</span>)cost[k]++;</span><br><span class="line">ans[k][j-i+<span class="number">1</span>-cost[k]]=<span class="built_in">max</span>(j-i+<span class="number">1</span>,ans[k][j-i+<span class="number">1</span>-cost[k]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;<span class="number">26</span>;x++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans[x][i]=<span class="built_in">max</span>(ans[x][i],ans[x][i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;q--;cin&gt;&gt;x&gt;&gt;c,<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[c-<span class="string">&#x27;a&#x27;</span>][x]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF811D/"/>
      <url>/2022/05/30/CF811D/</url>
      
        <content type="html"><![CDATA[<p>[[interactive]] [[shortest_path]]<br><a href="https://codeforces.com/problemset/problem/811/D">link</a></p><p>An interactive problem, we need use <code>fflush(stdout);</code></p><p>First, find a path to the destination, using BFS.</p><p>Then, hit the wall or “lose” for less than two times to update the right direction.</p><p>Finally, walk to the destination.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,x,y,xx,yy,cnt,a[<span class="number">102</span>][<span class="number">102</span>],way[<span class="number">20004</span>];</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> que[<span class="number">10004</span>][<span class="number">2</span>],l,r,vis[<span class="number">102</span>][<span class="number">102</span>],dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;,dy[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,ret[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;F&#x27;</span>)a[i][j]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;*&#x27;</span>)a[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)vis[<span class="number">0</span>][i]=vis[i][<span class="number">0</span>]=vis[n+<span class="number">1</span>][i]=vis[i][m+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">que[l][<span class="number">0</span>]=<span class="number">1</span>,que[l][<span class="number">1</span>]=<span class="number">1</span>;vis[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;l&lt;=r;l++)&#123;</span><br><span class="line">x=que[l][<span class="number">0</span>],y=que[l][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(a[x][y]==<span class="number">2</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)<span class="keyword">if</span>(!vis[xx=x+dx[i]][yy=y+dy[i]]&amp;&amp;a[xx][yy]!=<span class="number">1</span>)&#123;</span><br><span class="line">ret[xx][yy]=i;</span><br><span class="line">que[++r][<span class="number">0</span>]=xx;</span><br><span class="line">que[r][<span class="number">1</span>]=yy;</span><br><span class="line">vis[xx][yy]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;x!=<span class="number">1</span>||y!=<span class="number">1</span>;)&#123;</span><br><span class="line">way[cnt++]=ret[x][y];</span><br><span class="line">xx=x;yy=y;</span><br><span class="line">x-=dx[ret[xx][yy]];</span><br><span class="line">y-=dy[ret[xx][yy]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=cnt<span class="number">-1</span>,j=<span class="number">0</span>;j&lt;i;j++,i--)&#123;</span><br><span class="line"><span class="built_in">swap</span>(way[i],way[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">4</span>]=&#123;<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;U&#x27;</span>&#125;;</span><br><span class="line">x=y=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">cout&lt;&lt;ch[way[i]]&lt;&lt;endl;</span><br><span class="line"><span class="built_in">fflush</span>(stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;xx,&amp;yy);</span><br><span class="line"><span class="keyword">if</span>(x+dx[way[i]]!=xx||y+dy[way[i]]!=yy)&#123;</span><br><span class="line"><span class="built_in">swap</span>(ch[way[i]],ch[way[i]^<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>((xx!=x||yy!=y)&amp;&amp;(xx!=<span class="number">-1</span>||yy!=<span class="number">-1</span>))</span><br><span class="line">cout&lt;&lt;ch[way[i]]&lt;&lt;endl,<span class="built_in">fflush</span>(stdout),<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">cout&lt;&lt;ch[way[i]]&lt;&lt;endl,<span class="built_in">fflush</span>(stdout),<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> x+=dx[way[i]],y+=dy[way[i]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF776D/"/>
      <url>/2022/05/30/CF776D/</url>
      
        <content type="html"><![CDATA[<p>[[2-sat]]<br><a href="http://codeforces.com/problemset/problem/776/D">link</a></p><p>The most important information is that each door is controlled by <strong>exactly two</strong> switches.</p><p>If this door is closed, If the first switch is selected, then the second switch must can’t be selected,</p><p>​If the first switch isn’t selected, then the second switch must be selected.</p><p>If this door is on, If the first switch is selected, then the second switch must be selected,</p><p>​If the first switch isn’t selected, then the second switch must can’t be selected.</p><p>Use <strong>2-sat</strong>.</p><p>Divide a switch into two nodes.</p><p>A node means if select this switch, another means if don’t select this switch.</p><p>Then put it down, if you must to do it.</p><p>If meet something wrong (you must select and must can’t select a switch in the same time), print NO.</p><p>If everything is ok, print YES.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> a,n,m,l[N],link[<span class="number">2</span>][N],o,t;</span><br><span class="line"><span class="type">int</span> h[N&lt;&lt;<span class="number">1</span>],to[N&lt;&lt;<span class="number">2</span>],nxt[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">nxt[++t]=h[u],h[u]=t,to[t]=v;</span><br><span class="line">nxt[++t]=h[v],h[v]=t,to[t]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> vis[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u^<span class="number">1</span>])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> e=h[u];e;e=nxt[e])</span><br><span class="line"><span class="keyword">if</span>(!vis[to[e]]&amp;&amp;!<span class="built_in">dfs</span>(to[e]))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;l[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;o);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=o;j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line"><span class="keyword">if</span>(link[<span class="number">0</span>][a])link[<span class="number">1</span>][a]=i*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> link[<span class="number">0</span>][a]=i*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(l[i])&#123;</span><br><span class="line"><span class="built_in">add</span>(link[<span class="number">0</span>][i],link[<span class="number">1</span>][i]);</span><br><span class="line"><span class="built_in">add</span>(link[<span class="number">0</span>][i]^<span class="number">1</span>,link[<span class="number">1</span>][i]^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">add</span>(link[<span class="number">0</span>][i]^<span class="number">1</span>,link[<span class="number">1</span>][i]);</span><br><span class="line"><span class="built_in">add</span>(link[<span class="number">0</span>][i],link[<span class="number">1</span>][i]^<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line"><span class="keyword">if</span>(!vis[i*<span class="number">2</span>]&amp;&amp;!vis[i*<span class="number">2</span>+<span class="number">1</span>]&amp;&amp;!<span class="built_in">dfs</span>(i*<span class="number">2</span>))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>),<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF761C/"/>
      <url>/2022/05/30/CF761C/</url>
      
        <content type="html"><![CDATA[<p>[[DP]]<br><a href="https://codeforces.com/problemset/problem/761/C">link</a></p><p>First, calc three numbers about i-th string which mean the shortest distance to ‘#’ ‘*‘ ‘&amp;’, number and letter.</p><p>Then, use DP.</p><p>The DP transfer equation is:<br>$$<br>\begin{aligned}<br>&amp;dp[1][0][0][i]&#x3D;dp[1][0][0][i-1]+da[i][0]\<br>&amp;dp[0][1][0][i]&#x3D;dp[0][1][0][i-1]+da[i][1]\<br>&amp;dp[0][0][1][i]&#x3D;dp[0][0][1][i-1]+da[i][2]\<br>&amp;dp[1][1][0][i]&#x3D;min<br>\begin{cases}<br>dp[1][1][0][i-1]+min(da[i][0],da[i][1])\<br>dp[1][0][0][i-1]+da[i][1]\<br>dp[0][1][0][i-1]+da[i][0]<br>\end{cases}\<br>&amp;dp[0][1][1][i]&#x3D;min<br>\begin{cases}<br>dp[0][1][1][i-1]+min(da[i][1],da[i][2])\<br>dp[0][1][0][i-1]+da[i][2]\<br>dp[0][0][1][i-1]+da[i][1]<br>\end{cases}\<br>&amp;dp[1][0][1][i]&#x3D;min<br>\begin{cases}<br>dp[1][0][1][i-1]+min(da[i][0],da[i][2])\<br>dp[1][0][0][i-1]+da[i][2]\<br>dp[0][0][1][i-1]+da[i][0]<br>\end{cases}\<br>&amp;dp[1][1][1][i]&#x3D;min<br>\begin{cases}<br>dp[1][1][1][i-1]+min(da[i][0],min(da[i][1],da[i][2]))\<br>dp[1][1][0][i-1]+da[i][2]\<br>dp[1][0][1][i-1]+da[i][1]\<br>dp[0][1][1][i-1]+da[i][0]<br>\end{cases}<br>\end{aligned}<br>$$<br>Every bit stores whether this kind of characters has appeared.</p><p>That’s all.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,dp[<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">55</span>],da[<span class="number">55</span>][<span class="number">3</span>],l,r;</span><br><span class="line"><span class="type">char</span> a[<span class="number">55</span>][<span class="number">55</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isn</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isc</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c==<span class="string">&#x27;#&#x27;</span>||c==<span class="string">&#x27;&amp;&#x27;</span>||c==<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isa</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> c&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)cin&gt;&gt;a[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isn</span>(a[i][<span class="number">1</span>]))&#123;</span><br><span class="line"><span class="keyword">for</span>(l=<span class="number">2</span>,r=m;l&lt;=r;l++,r--)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isn</span>(a[i][l])||<span class="built_in">isn</span>(a[i][r]))&#123;</span><br><span class="line">da[i][<span class="number">0</span>]=l<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)da[i][<span class="number">0</span>]=<span class="number">1e3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isc</span>(a[i][<span class="number">1</span>]))&#123;</span><br><span class="line"><span class="keyword">for</span>(l=<span class="number">2</span>,r=m;l&lt;=r;l++,r--)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isc</span>(a[i][l])||<span class="built_in">isc</span>(a[i][r]))&#123;</span><br><span class="line">da[i][<span class="number">1</span>]=l<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)da[i][<span class="number">1</span>]=<span class="number">1e3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isa</span>(a[i][<span class="number">1</span>]))&#123;</span><br><span class="line"><span class="keyword">for</span>(l=<span class="number">2</span>,r=m;l&lt;=r;l++,r--)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isa</span>(a[i][l])||<span class="built_in">isa</span>(a[i][r]))&#123;</span><br><span class="line">da[i][<span class="number">2</span>]=l<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)da[i][<span class="number">2</span>]=<span class="number">1e3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>]=da[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]=da[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>]=da[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1e3</span>;</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1e3</span>;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1e3</span>;</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][i]=dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][i<span class="number">-1</span>]+da[i][<span class="number">0</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][i]=dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][i<span class="number">-1</span>]+da[i][<span class="number">1</span>];</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>][i]=dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>][i<span class="number">-1</span>]+da[i][<span class="number">2</span>];</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>][i]=<span class="built_in">min</span>(dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>][i<span class="number">-1</span>]+<span class="built_in">min</span>(da[i][<span class="number">0</span>],da[i][<span class="number">1</span>]),<span class="built_in">min</span>(dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][i<span class="number">-1</span>]+da[i][<span class="number">1</span>],dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][i<span class="number">-1</span>]+da[i][<span class="number">0</span>]));</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>][i]=<span class="built_in">min</span>(dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>][i<span class="number">-1</span>]+<span class="built_in">min</span>(da[i][<span class="number">1</span>],da[i][<span class="number">2</span>]),<span class="built_in">min</span>(dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][i<span class="number">-1</span>]+da[i][<span class="number">2</span>],dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>][i<span class="number">-1</span>]+da[i][<span class="number">1</span>]));</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>][i]=<span class="built_in">min</span>(dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>][i<span class="number">-1</span>]+<span class="built_in">min</span>(da[i][<span class="number">0</span>],da[i][<span class="number">2</span>]),<span class="built_in">min</span>(dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>][i<span class="number">-1</span>]+da[i][<span class="number">2</span>],dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>][i<span class="number">-1</span>]+da[i][<span class="number">0</span>]));</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][i]=<span class="built_in">min</span>(dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][i<span class="number">-1</span>]+<span class="built_in">min</span>(da[i][<span class="number">0</span>],<span class="built_in">min</span>(da[i][<span class="number">1</span>],da[i][<span class="number">2</span>])),<span class="built_in">min</span>(dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>][i<span class="number">-1</span>]+da[i][<span class="number">2</span>],<span class="built_in">min</span>(dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>][i<span class="number">-1</span>]+da[i][<span class="number">1</span>],dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>][i<span class="number">-1</span>]+da[i][<span class="number">0</span>])));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF711E/"/>
      <url>/2022/05/30/CF711E/</url>
      
        <content type="html"><![CDATA[<p>[[math]] [[combinatorics]] [[inverse_element]]<br><a href="https://codeforces.com/problemset/problem/711/E">link</a></p><h2 id="The-tutorial-on-CF"><a href="#The-tutorial-on-CF" class="headerlink" title="The tutorial on CF"></a>The tutorial on CF</h2><p>Note that <em>MOD</em>&#x3D;10^6^+3 is a prime.</p><p>Firstly, if we have $k &gt; 2^n$, then by pigeonhole principle(鸽笼原理) we must have 2 people with the same birthday. Thus, we can directly output 1 1.</p><p>Thus, now we suppose $k \le 2^n$. Then, instead of computing the probability directly, we compute the complement, i.e. the probability that all the people have distinct birthdays. This probability <code>turns out</code> to be much simpler to calculate, as it is just &#x3D;&#x3D;$\frac{(2^n-1)*(2^n-2)…(2^n-(k-1))}{2^{(k-1)n}}$&#x3D;&#x3D;. (Fix the birthday of the first person, the probability that the second person has different birthday is $\frac{2^n-1}{2^n}$, and for the next person it’s $\frac{2^n-2}{2^n}$ and so on.)</p><p>Now, we know that the denominator is just a power of 2. However, we still have to reduce the fraction to the lowest terms. Note that $\frac{a}{b}$ is in the lowest terms if and only if $1-\frac{a}{b}&#x3D;\frac{b-a}{b}$ is in the lowest terms,since $gcd(a,b)&#x3D;gcd(b-a,b)$ . Also, note that the gcd is a power of 2 since the denominator is a power of 2. Thus, we need to find the highest power of 2 that divides (2<em>n</em> - 1)(2<em>n</em> - 2)…(2<em>n</em> - (<em>k</em> - 1)). This is also equal to the sum of the highest power of 2 that divides 2n-1, 2n-2, …, 2n-(k-1).</p><p>Now, &#x3D;&#x3D;if a power of 2 divides <em>x</em> &lt; 2^n^, then it must also divides 2^n^ - <em>x</em> and vice versa.&#x3D;&#x3D; So, we can actually translate this to finding the sum of highest power of 2 that divides 1, 2, …, <em>k</em> - 1, or the highest power of 2 that divides (<em>k</em> - 1)! . Now, this is simple to calculate by Legendre’s formula (which is quite easy to prove) in $O(log k)$.</p><p>Now that we find the gcd of the numerator and denominator, we can immediately find the reduced denominator by binary exponentiation. For the numerator, we need a bit more work, since we have to deal with (2<em>n</em> - 1)(2<em>n</em> - 2)…(2<em>n</em> - (<em>k</em> - 1)). However, it is not hard either. The key fact is that <em>MOD</em> is small, so if <em>k</em> - 1 ≥ <em>MOD</em>, the product above is equal to 0 modulo <em>MOD</em>, because among <em>MOD</em> consecutive integers there must be one that is a multiple of <em>MOD</em>. Thus, the above product can be calculated in <em>O</em>(<em>MOD</em>) if <em>k</em> - 1 ≤ <em>MOD</em> and <em>O</em>(1) otherwise. The remaining parts can be calculated using direct binary exponentiation.</p><p>One minor note is that when we’re calculating 2(<em>k</em> - 1)<em>n</em>, the value of (<em>k</em> - 1)<em>n</em> might overflow. One way to resolve this is to reduce it modulo <em>MOD</em> - 1, since 2^MOD-1^ ≡ 1 modulo <em>MOD</em> by Fermat’s Little Theorem. Another way is to just evaluate 2^k-1^ first, then take the result and raise it to the <em>n</em>-th power.</p><p>Time Complexity : $O(MOD+logk+logn)$</p><h2 id="Some-discoveries"><a href="#Some-discoveries" class="headerlink" title="Some discoveries"></a>Some discoveries</h2><p>The highest power of 2 that divides $n!$ is equal to n subtract the number of 1 in binary form of n.</p><h3 id="Legendre’s-formula"><a href="#Legendre’s-formula" class="headerlink" title="Legendre’s formula:"></a>Legendre’s formula:</h3><p>在正数n!的素因子标准分解式中，素数p的最高指数<br>$$<br>L_p(n!)&#x3D;\Sigma_{k\ge1}\lfloor\frac{n}{p^k}\rfloor<br>$$</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span>#<span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll n,k;</span><br><span class="line">ll a,a1,a2,cnt;</span><br><span class="line"><span class="type">const</span> ll mod=<span class="number">1000003</span>;</span><br><span class="line">ll res;</span><br><span class="line"><span class="function">ll <span class="title">fpw</span><span class="params">(ll x,ll a)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(res=<span class="number">1</span>;a;a&gt;&gt;=<span class="number">1</span>,(x*=x)%=mod)<span class="keyword">if</span>(a&amp;<span class="number">1</span>)(res*=x)%=mod;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">ll den,num;<span class="comment">//denominator and numerator</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(a=k<span class="number">-1</span>;a;a&gt;&gt;=<span class="number">1</span>)cnt++;</span><br><span class="line"><span class="keyword">if</span>(n&lt;cnt)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1 1&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(a=cnt=k<span class="number">-1</span>;a;a&gt;&gt;=<span class="number">1</span>)<span class="keyword">if</span>(<span class="number">1</span>&amp;a)cnt--;</span><br><span class="line">den=<span class="built_in">fpw</span>(<span class="built_in">fpw</span>(<span class="number">2</span>,k<span class="number">-1</span>),n)*<span class="built_in">fpw</span>(<span class="built_in">fpw</span>(<span class="number">2</span>,mod<span class="number">-2</span>),cnt)%mod;</span><br><span class="line"><span class="keyword">if</span>(k<span class="number">-1</span>&gt;=mod)num=den;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(a=<span class="built_in">fpw</span>(<span class="number">2</span>,n),i=num=<span class="number">1</span>;i&lt;=k<span class="number">-1</span>;i++)num=(a-i+mod)%mod*num%mod;</span><br><span class="line">num=num*<span class="built_in">fpw</span>(<span class="built_in">fpw</span>(<span class="number">2</span>,mod<span class="number">-2</span>),cnt)%mod;</span><br><span class="line">num=den-num&lt;<span class="number">0</span>?(mod-num+den)%mod:den-num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %lld&quot;</span>,num,den);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Techniques"><a href="#Techniques" class="headerlink" title="Techniques"></a>Techniques</h1><h2 id="Inverse-element"><a href="#Inverse-element" class="headerlink" title="Inverse element"></a>Inverse element</h2><h3 id="Way1"><a href="#Way1" class="headerlink" title="Way1"></a>Way1</h3><blockquote><h3 id="Fermat’s-little-theorem"><a href="#Fermat’s-little-theorem" class="headerlink" title="Fermat’s little theorem"></a>Fermat’s little theorem</h3><p>$p$ is a prime, and $a$ isn’t a multiple of $p$, then<br>$$<br>a^{p-1}\equiv1 \pmod p<br>$$</p></blockquote><p>We can <code>deduce</code> from this that<br>$$<br>Inv_a&#x3D;a^{p-2}%p<br>$$</p><p>Using this, we can compute a inverse element of $a$ by &#x3D;&#x3D;fast power&#x3D;&#x3D; with modulo in $O(\log p)$</p><h3 id="Way2"><a href="#Way2" class="headerlink" title="Way2"></a>Way2</h3><p>Regard this congruence equation<br>$$<br>Inv_a<em>a\equiv1 \pmod p<br>$$<br>as another equation ($x&#x3D;Inv, b&#x3D;p$)<br>$$<br>a</em>Inv_a+p*any&#x3D;1<br>$$<br>then the only thing we need to do is that find a possible solution of the equation.</p><p>And, coincidentally, there is an algorithm <code>dedicated to</code> this kind of problem.</p><blockquote><h3 id="Exgcd"><a href="#Exgcd" class="headerlink" title="Exgcd"></a>Exgcd</h3><p>Quite evidently, $a$ and $p$ are coprime(according to Bézout’s identity which also called Bézout’s lemma),</p><p>and this algorithm is based on Euclid’s algorithm.<br>$$<br>\begin{align}<br>Final\ state:&amp;1<em>1+0</em>0&#x3D;1\ \ \ \text{i.e.}\ \ \ a&#x3D;1,b&#x3D;0,x&#x3D;1,y&#x3D;0\<br>Transfer:&amp;1&#x3D;a<em>x_0+b</em>y_0&#x3D;b<em>x_1+a%b</em>y_1&#x3D;b<em>x_1+(a-\lfloor\frac{a}{b}\rfloor</em>b)<em>y_1\<br>&amp;&#x3D;a</em>y_1+b*(x_1-\lfloor\frac{a}{b}\rfloor<em>y_1)\<br>That\ is:&amp;x_0\gets y_1\ \text{and}\ y_0\gets x_1-\lfloor\frac{a}{b}\rfloor</em>y_1<br>\end{align}<br>$$<br><strong>Code:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"><span class="type">void</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span>&amp;x,<span class="type">int</span>&amp;y)</span></span>&#123;b?<span class="built_in">exgcd</span>(b,a%b,y,x),y-=a/b*x:(x=<span class="number">1</span>,y=<span class="number">0</span>);&#125;</span><br><span class="line">&gt;<span class="built_in">exgcd</span>(a,p,inv,x);</span><br><span class="line">&gt;(inv+=p)%=p;</span><br></pre></td></tr></table></figure><p>Must use recursive form.</p><p>By the way, there is a small optimization of gcd here.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;while(b^=a^=b^=a%=b);</span><br></pre></td></tr></table></figure><p>than, a&#x3D;gcd(a,b);</p></blockquote><h3 id="Way3"><a href="#Way3" class="headerlink" title="Way3"></a>Way3</h3><p>$$<br>\begin{align}<br>&amp;p&#x3D;\lfloor\frac{p}{a}\rfloor<em>a+p%a\<br>\iff&amp;\lfloor\frac{p}{a}\rfloor</em>a\equiv-p%a\pmod p\<br>\iff&amp;a^{-1}\equiv(-p%a)^{-1}<em>\lfloor\frac{p}{a}\rfloor\equiv-\lfloor\frac{p}{a}\rfloor</em>(p%a)^{-1}\equiv(p-\lfloor\frac{p}{a}\rfloor)*(p%a)^{-1}\pmod p<br>\end{align}<br>$$</p><p>Since limited that $Inv$ must be positive, we must plus a $p$ before $-\lfloor\frac{p}{a}\rfloor$.</p><p>Therefore, we can deduce $Inv_a$ from $Inv_{p-p&#x2F;a}$.</p><p>By this way, we can calculate the inverse elements from 1~n in linear time.</p><p><strong>Code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(inv[<span class="number">1</span>]=<span class="number">1</span>,i=<span class="number">2</span>;i&lt;p;i++)inv[i]=inv[p%i]*(p-p/i)%p;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF596E/"/>
      <url>/2022/05/30/CF596E/</url>
      
        <content type="html"><![CDATA[<p>[[dfs]] [[trees_and_similar]]<br><a href="https://codeforces.com/problemset/problem/596/E">link</a></p><p>This matrix is equivalent to a forest of 基环树.</p><p>The task is to judge that there is or not a path we walk up contain the query sequence.</p><p>We don’t need to care about the numbers in the cycles, since we can turn any numbers of cycles.</p><p>So, we’d better reserve the query sequence.</p><p>Then, it’s a dfs problem that find a set of numbers on the nodes in a few trees.</p><h3 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h3><p>create connection</p><p>build reserve graph</p><p>find cycles</p><p>find roots below cycles</p><p>deal with queries</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100005</span>;</span><br><span class="line"><span class="type">int</span> n,m,q,r[<span class="number">202</span>][<span class="number">202</span>],nt[N],nxt[N],t,h[N],to[N],num[N],dx[<span class="number">10</span>],dy[<span class="number">10</span>];</span><br><span class="line"><span class="type">char</span> a,qu[<span class="number">1000006</span>];</span><br><span class="line"><span class="type">int</span> cy[N],cyc,c,f[N],ind[N][<span class="number">10</span>],in_cyc[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;ro[N];</span><br><span class="line"><span class="type">bool</span> fl,fla;</span><br><span class="line"><span class="type">int</span> uu,len,it;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">nxt[++t]=h[u],h[u]=t,to[t]=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find_cycles</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cy[u])&#123;</span><br><span class="line">fl=<span class="number">1</span>;c=cy[u];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f[u])&#123;</span><br><span class="line">fl=<span class="number">1</span>;c=++cyc;</span><br><span class="line">fla=<span class="number">1</span>;uu=u;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">f[u]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">find_cycles</span>(nt[u]);</span><br><span class="line"><span class="keyword">if</span>(fl)cy[u]=c;</span><br><span class="line"><span class="keyword">if</span>(fla)&#123;</span><br><span class="line">in_cyc[u]=ind[c][num[u]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(u==uu)fla=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">f[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num[u]==qu[it]-<span class="string">&#x27;0&#x27;</span>)it++;</span><br><span class="line"><span class="keyword">if</span>(it==len)&#123;</span><br><span class="line">fl=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> e=h[u];e;e=nxt[e])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(to[e]);</span><br><span class="line"><span class="keyword">if</span>(fl==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(num[u]==qu[it]-<span class="string">&#x27;0&#x27;</span>)it--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num[u]==qu[it]-<span class="string">&#x27;0&#x27;</span>)it--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> nx,ny;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">cin&gt;&gt;a;r[i][j]=a-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)cin&gt;&gt;dx[i]&gt;&gt;dy[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//edge</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">nx=i+dx[r[i][j]];</span><br><span class="line">ny=j+dy[r[i][j]];</span><br><span class="line"><span class="keyword">if</span>(nx&lt;<span class="number">0</span>||nx&gt;=n||ny&lt;<span class="number">0</span>||ny&gt;=m)nt[m*i+j]=m*i+j;</span><br><span class="line"><span class="keyword">else</span> nt[m*i+j]=nx*m+ny;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//reverse</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="built_in">add</span>(nt[i*m+j],i*m+j);</span><br><span class="line">num[i*m+j]=r[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!cy[i*m+j])fl=<span class="number">0</span>,fla=<span class="number">0</span>,<span class="built_in">find_cycles</span>(i*m+j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> e=h[i*m+j];e;e=nxt[e])&#123;</span><br><span class="line"><span class="keyword">if</span>(in_cyc[i*m+j]&amp;&amp;<span class="comment">/*&lt;-lost*/</span>!in_cyc[to[e]])ro[cy[i*m+j]].<span class="built_in">push_back</span>(to[e]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;q--;)&#123;</span><br><span class="line">cin&gt;&gt;qu;len=<span class="built_in">strlen</span>(qu);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> a=<span class="number">0</span>,b=len<span class="number">-1</span>;a&lt;b;a++,b--)qu[a]^=qu[b]^=qu[a]^=qu[b];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cyc;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(it=<span class="number">0</span>;it&lt;len&amp;&amp;ind[i][qu[it]-<span class="string">&#x27;0&#x27;</span>];it++);</span><br><span class="line"><span class="keyword">if</span>(it==len)&#123;cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;<span class="keyword">goto</span> out;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> u:ro[i])&#123;</span><br><span class="line">fl=<span class="number">0</span>,<span class="built_in">dfs</span>(u);</span><br><span class="line"><span class="keyword">if</span>(fl==<span class="number">1</span>)&#123;cout&lt;&lt;<span class="string">&quot;YES&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;<span class="keyword">goto</span> out;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NO&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">out:;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF385E/"/>
      <url>/2022/05/30/CF385E/</url>
      
        <content type="html"><![CDATA[<p>[[math]] [[matrices]] [[fast_exponentiation]]<br><a href="https://codeforces.com/problemset/problem/385/E">link</a></p><p>Consider ignoring the modulo, then calculate at the same time.<br>$$<br>\begin{aligned}<br>dx&amp;&#x3D;x+y+dx+t\<br>dy&amp;&#x3D;x+y+dy+t\<br>x&amp;&#x3D;dx+2x+y+t\<br>y&amp;&#x3D;dy+x+2y+t\<br>t&amp;&#x3D;t+1<br>\end{aligned}<br>$$<br>![[Pasted image 20220529224154.png]]</p><h2 id="Matrix-fast-exponentiation"><a href="#Matrix-fast-exponentiation" class="headerlink" title="Matrix fast exponentiation"></a>Matrix fast exponentiation</h2><p>$$<br>\begin{aligned}<br>dx&#x3D;1<em>dx+0</em>dy+1<em>x+1</em>y+1<em>t+0</em>1\<br>dy&#x3D;0<em>dx+1</em>dy+1<em>x+1</em>y+1<em>t+0</em>1\<br>x&#x3D;1<em>dx+0</em>dy+2<em>x+1</em>y+1<em>t+0</em>1\<br>y&#x3D;0<em>dx+1</em>dy+1<em>x+2</em>y+1<em>t+0</em>1\<br>t&#x3D;0<em>dx+0</em>dy+0<em>x+0</em>y+1<em>t+1</em>1\<br>1&#x3D;0<em>dx+0</em>dy+0<em>x+0</em>y+0<em>t+1</em>1\end{aligned}<br>$$</p><p>We can use matrices to describe it.</p><p>$$<br>\left[\begin{array}{}<br>dx&amp;dy&amp;x&amp;y&amp;t&amp;1<br>\end{array}<br>\right]<br>\left[\begin{array}{}<br>1&amp;0&amp;1&amp;0&amp;0&amp;0\<br>0&amp;1&amp;0&amp;1&amp;0&amp;0\<br>1&amp;1&amp;2&amp;1&amp;0&amp;0\<br>1&amp;1&amp;1&amp;2&amp;0&amp;0\<br>1&amp;1&amp;1&amp;1&amp;1&amp;0\<br>0&amp;0&amp;0&amp;0&amp;1&amp;1<br>\end{array}<br>\right]&#x3D;\left[\begin{array}{}<br>x+y+dx+t\x+y+dy+t\dx+2x+y+t\dy+x+2y+t\t+1\1<br>\end{array}<br>\right]<br>$$<br>Notice the 1.</p><p>Then we can use matrix fast exponentiation.</p><p>It consists of fast exponentiation, multiplication and square.</p><p>&#x3D;&#x3D;Multiplication&#x3D;&#x3D; is a multiplication of matrices of (n,n) and (1,n), whose answer is a matrix of (n,1)</p><p>&#x3D;&#x3D;Square&#x3D;&#x3D; is a multiplication of two matrices of (n,n), whose answer is also a matrix of (n,n)</p><p>&#x3D;&#x3D;Fast exponentiation&#x3D;&#x3D; is the same of the fast exponentiation of numbers.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll n,x,y,dx,dy,t,ret;</span><br><span class="line">ll _[<span class="number">6</span>][<span class="number">6</span>]=&#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">&#125;,o[<span class="number">6</span>][<span class="number">6</span>],a[<span class="number">6</span>],b[<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mult</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(b[i]=<span class="number">0</span>,j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)(b[i]+=_[j][i]*a[j])%=n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)a[i]=b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">square</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)</span><br><span class="line"><span class="keyword">for</span>(o[i][j]=<span class="number">0</span>,k=<span class="number">0</span>;k&lt;<span class="number">6</span>;k++)</span><br><span class="line">(o[i][j]+=_[i][k]*_[k][j])%=n;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)_[i][j]=o[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fpw</span><span class="params">(ll a)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;a;a&gt;&gt;=<span class="number">1</span>,<span class="built_in">square</span>())<span class="keyword">if</span>(a&amp;<span class="number">1</span>)<span class="built_in">mult</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld%lld%lld&quot;</span>,&amp;n,&amp;x,&amp;y,&amp;dx,&amp;dy,&amp;t);</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">0</span>)<span class="built_in">printf</span>(<span class="string">&quot;%lld %lld&quot;</span>,x,y),<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">dx=(dx%n+n)%n;dy=(dy%n+n)%n;</span><br><span class="line">a[<span class="number">0</span>]=dx,a[<span class="number">1</span>]=dy,a[<span class="number">2</span>]=x,a[<span class="number">3</span>]=y;a[<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">fpw</span>(t);</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">2</span>]==<span class="number">0</span>)a[<span class="number">2</span>]=n;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">3</span>]==<span class="number">0</span>)a[<span class="number">3</span>]=n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %lld&quot;</span>,a[<span class="number">2</span>],a[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF372D/"/>
      <url>/2022/05/30/CF372D/</url>
      
        <content type="html"><![CDATA[<p>[[two_pointers]] [[LCA]] [[dfs_order]] [[map]] [[subtree]]<br><a href="https://codeforces.com/problemset/problem/1662/D">This problem</a> took me three nights.</p><p>Calculate the longest length of interval of indices of nodes in a subtree whose size is less than k.</p><h2 id="Sol"><a href="#Sol" class="headerlink" title="Sol"></a>Sol</h2><p> Binary search, search the answer? every check at most cost $O(n\log n)$, and all in $O(n\log^2n)$ .</p><p>No, there is simpler solution.</p><p>Use two pointers (尺取法 in Chinese).</p><p>Then consider how to add and delete an index.</p><p>What we need to know is how to calculate the distance from a node to a subtree.(the part of function <code>Cnt</code>)</p><p>It’s so hard so I thought so long, and got nothing.</p><p><img src="C:_WD_\Tutorial\Attachment\1.jpg" alt="1"></p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">100005</span>,M=<span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> k,n,a,b;</span><br><span class="line"><span class="type">int</span> t,h[N],nxt[M],to[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">nxt[++t]=h[u],h[u]=t,to[t]=v;</span><br><span class="line">nxt[++t]=h[v],h[v]=t,to[t]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt,dfn[N],dep[N];</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">dfn[u]=++cnt;f[u][<span class="number">0</span>]=fa;dep[u]=dep[fa]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">19</span>;i++)f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> e=h[u];e;e=nxt[e])<span class="keyword">if</span>(to[e]!=fa)<span class="built_in">dfs</span>(to[e],u);</span><br><span class="line">&#125;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;ord;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="type">int</span> sz,ans,dx,dy;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dis</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">dx=dep[x],dy=dep[y];</span><br><span class="line"><span class="keyword">if</span>(dep[x]&lt;dep[y])<span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--)<span class="keyword">if</span>(dep[f[x][i]]&gt;=dep[y])x=f[x][i];</span><br><span class="line"><span class="keyword">if</span>(x==y)<span class="keyword">return</span> dx+dy<span class="number">-2</span>*dep[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--)<span class="keyword">if</span>(f[x][i]!=f[y][i])x=f[x][i],y=f[y][i];</span><br><span class="line"><span class="keyword">return</span> dx+dy<span class="number">-2</span>*(dep[x]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Cnt</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ord.<span class="built_in">size</span>()==<span class="number">1</span>)<span class="keyword">return</span> <span class="built_in">dis</span>(p,ord.<span class="built_in">begin</span>()-&gt;second);</span><br><span class="line">it=ord.<span class="built_in">upper_bound</span>(dfn[p]);</span><br><span class="line"><span class="keyword">if</span>(it==ord.<span class="built_in">end</span>()||it==ord.<span class="built_in">begin</span>())&#123;</span><br><span class="line">x=ord.<span class="built_in">begin</span>()-&gt;second;</span><br><span class="line">y=ord.<span class="built_in">rbegin</span>()-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">x=it-&gt;second;it--;</span><br><span class="line">y=it-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">dis</span>(p,x)+<span class="built_in">dis</span>(p,y)-<span class="built_in">dis</span>(x,y))/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">sz+=<span class="built_in">Cnt</span>(x);</span><br><span class="line">ord[dfn[x]]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Del</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">ord.<span class="built_in">erase</span>(dfn[x]);</span><br><span class="line">sz-=<span class="built_in">Cnt</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b),<span class="built_in">add</span>(a,b);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(ord[dfn[<span class="number">1</span>]]=sz=l=ans=<span class="number">1</span>,r=<span class="number">2</span>;r&lt;=n;r++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">Add</span>(r);sz&gt;k;<span class="built_in">Del</span>(l++));</span><br><span class="line">ans=<span class="built_in">max</span>(ans,r-l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF367E/"/>
      <url>/2022/05/30/CF367E/</url>
      
        <content type="html"><![CDATA[<p>[[DP]] [[interval]]<br><a href="https://codeforces.com/problemset/problem/367/E">link</a></p><h2 id="Pro"><a href="#Pro" class="headerlink" title="Pro"></a>Pro</h2><p>Calculate the number of states(interval sequence) meet following conditions:</p><ul><li><p>Each interval does not belong to any other interval.</p></li><li><p>Exist one $l_i&#x3D;x$ .</p></li></ul><p>$n, m, x (1 ≤ n·m ≤ 100000, 1 ≤ x ≤ m)$ — the number of segments in the sequence, the constraints on the numbers in segments and Sereja’s favourite number.</p><h2 id="Sol"><a href="#Sol" class="headerlink" title="Sol"></a>Sol</h2><p>$n$ must &lt;&#x3D; $m$.</p><p>State as $dp_{i,l,r}$ is too big.</p><p>How can we represent the states more properly?<br>Since the intervals don’t belong to each other, the order of start and end position of intervals is fixed.</p><p>see this picture <img src="C:_WD_\Tutorial\Attachment\3.png" alt="1"></p><p>$dp_{p,i,j}$ has four transfer equations.</p><p>whether start a new interval, and whether finish the farthest interval.</p><p>After a seris of optimization, the code is following</p><blockquote><p>Reverse the traversal direction, so we can remove the p dimention.</p><p>We must open a new interval when $p&#x3D;x$, so the next states can only be added twice.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1000000007</span>,N=<span class="number">333</span>;</span><br><span class="line"><span class="type">int</span> n,m,x,o,a,f[N][N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> &amp;o)</span></span>&#123;o+=a;<span class="keyword">if</span>(o&gt;=mod)o-=mod;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> p,i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(n&gt;m)<span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>),<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(p=f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;p&lt;=m;p++)&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="built_in">min</span>(p,n);i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a=f[i][j])&#123;</span><br><span class="line"><span class="built_in">add</span>(f[i+<span class="number">1</span>][j]);</span><br><span class="line"><span class="built_in">add</span>(f[i+<span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(p==x)f[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j&lt;i)<span class="built_in">add</span>(f[i][j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=f[n][n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans=ans*i%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Complexity: $O(m*n^2)$, at most 3e7.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF283E/"/>
      <url>/2022/05/30/CF283E/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/283/E">link</a></p><p>[[sweep_line]] [[segment_tree]] [[math]] </p><p>This will go over the basic outline for solution.</p><p>The first thing to note, is that, if you interpret the problem as a graph,<br>you can compute the answer if you have the degrees (i.e. number of wins) of every cow.</p><p>Call three cows “unbalanced” if the is one cow that beats the other two.<br>Note that every three cows is either unbalanced or balanced (there are no other configurations of three cows).</p><p>Thus, $\text{balenced}+\text{unbalanced}&#x3D;C_n^3$.</p><p>So to count the number of balanced, it suffices to count the number of unbalanced.</p><p>But it is easy to show that $\text{unbalanced}&#x3D;\sum_{cows_i}C_{out_i}^2$, ([[CF1662N|a similar idea]])<br>so $\text{balanced}&#x3D;C_n^3-\sum_{cows_i}C_{out_i}^2$.</p><p>Now sort the skill levels of the cows (the order of the $s_i$ doesn’t actually matter). $s_1$ is lowest skill.</p><p>Now consider an $n × n$ grid where the i-th row and j-th column of the grid is a 1 if the match between cow $i$ and cow $j$ is flipped.</p><p>The grid is initially all zeros and Farmer John’s query simply flips a rectangle of the form $[a, b] × [a, b]$.</p><p>We can process these queries and compute the number of wins for each cow using a vertical sweep line on the grid and updating with a seg tree on the interval $[1,n]$. The seg tree needs to handle queries of the form </p><ul><li>Flip all numbers (0-&gt;1, 1-&gt;0) in a range $[a, b]$.</li><li>Query number of 1 in a range $[a, b]$.</li></ul><p>Note that given this seg tree we can compute the number of wins for each cow at every point in the sweep line as </p><p>$$\begin{aligned}&amp;\text{Number of 1 in range [ 1 , i - 1 ]} + \text{Number of 0 in range [ i + 1, n ]}\<br>&#x3D;&amp; \text{Number of 1 in range [ 1 , i - 1 ]} +  N-i-\text{Number of 1 in range [ i + 1, n ]}\end{aligned}$$</p><p> There are $m$ queries so this solution takes $O(m\log n)$ time.</p><p>Note that the seg tree needed to handle this problem is the same seg tree you need for problem <a href="http://tjsct.wikidot.com/usaco-nov08-gold">lites</a> on USACO 2008 Gold </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid (l+r&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (p&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (p&lt;&lt;1|1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="type">int</span> n,m,s[N],a,b,t,an[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="type">int</span> id,x,y;</span><br><span class="line">&#125;po[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="type">int</span> su[N&lt;&lt;<span class="number">1</span>],lz[N&lt;&lt;<span class="number">1</span>],x,y;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lz[p])&#123;</span><br><span class="line">lz[ls]^=<span class="number">1</span>;</span><br><span class="line">lz[rs]^=<span class="number">1</span>;</span><br><span class="line">su[ls]=mid-l+<span class="number">1</span>-su[ls];</span><br><span class="line">su[rs]=r-mid-su[rs];</span><br><span class="line">lz[p]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">su[p]=su[ls]+su[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">su[p]^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)&#123;</span><br><span class="line">lz[p]^=<span class="number">1</span>;</span><br><span class="line">su[p]=r-l+<span class="number">1</span>-su[p];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">down</span>(l,r,p);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)<span class="built_in">update</span>(l,mid,ls);</span><br><span class="line"><span class="keyword">if</span>(y&gt;mid)<span class="built_in">update</span>(mid+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> o;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">o+=su[p];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)&#123;</span><br><span class="line">o+=su[p];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">down</span>(l,r,p);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)<span class="built_in">query</span>(l,mid,ls);</span><br><span class="line"><span class="keyword">if</span>(mid&lt;y)<span class="built_in">query</span>(mid+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(s+<span class="number">1</span>,s+<span class="number">1</span>+n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">a=<span class="built_in">lower_bound</span>(s+<span class="number">1</span>,s+<span class="number">1</span>+n,a)-s;</span><br><span class="line">b=<span class="built_in">upper_bound</span>(s+<span class="number">1</span>,s+<span class="number">1</span>+n,b)-s;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">po[++t]=&#123;a,a,b<span class="number">-1</span>&#125;;</span><br><span class="line">po[++t]=&#123;b,a,b<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(po+<span class="number">1</span>,po+<span class="number">1</span>+t,[](A a,A b)&#123;</span><br><span class="line"><span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,c=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(;po[c].id==i;c++)</span><br><span class="line">x=po[c].x,y=po[c].y,<span class="built_in">update</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">an[i]=n-i;</span><br><span class="line">x=<span class="number">1</span>,y=i<span class="number">-1</span>;<span class="keyword">if</span>(x&lt;=y)o=<span class="number">0</span>,<span class="built_in">query</span>(<span class="number">1</span>,n,<span class="number">1</span>),an[i]+=o;</span><br><span class="line">x=i+<span class="number">1</span>,y=n;<span class="keyword">if</span>(x&lt;=y)o=<span class="number">0</span>,<span class="built_in">query</span>(<span class="number">1</span>,n,<span class="number">1</span>),an[i]-=o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans+=<span class="number">1ll</span>*an[i]*(an[i]<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">ans=<span class="number">1ll</span>*(n<span class="number">-2</span>)*(n<span class="number">-1</span>)*n/<span class="number">6</span>-ans;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF261E/"/>
      <url>/2022/05/30/CF261E/</url>
      
        <content type="html"><![CDATA[<p>[[DP]] [[two_pointers]]<br><a href="https://codeforces.com/contest/261/problem/E">link</a><br>A hint: There is near 3000000 numbers with maximal prime divisor &lt;&#x3D;100.</p><p>According to the hint, we can list all the passible numbers.<br>Then what we need to do is judge whether the number meets the condition or not.</p><p>We must make the cost smaller, so we can’t simply mark all the prime divisors of each number.</p><p>We need to combine several divisors.<br>And, the maximal prime divisors must be selected (a conclusion).</p><p>We can do DP, by two pointers, in the sorted list.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">3000006</span>;</span><br><span class="line"><span class="type">int</span> a[N],f[N],b[N],l,r,n,m,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;n);</span><br><span class="line">a[m++]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;i;j++)<span class="keyword">if</span>(i%j==<span class="number">0</span>)<span class="keyword">goto</span> E;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)<span class="keyword">if</span>(<span class="number">1ll</span>*a[j]*i&lt;=r)a[m++]=a[j]*i;</span><br><span class="line">E:;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a,a+m);</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">0x7f</span>,<span class="built_in">sizeof</span>(f));f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//DP and two_pointers </span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>,k=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line"><span class="keyword">if</span>(a[j]%i==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[k]+<span class="number">1</span>&lt;f[j])&#123;</span><br><span class="line">f[j]=f[k]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(f[j]+i&lt;=n)b[j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="keyword">if</span>(a[i]&gt;=l&amp;&amp;b[i])ans++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF235C/"/>
      <url>/2022/05/30/CF235C/</url>
      
        <content type="html"><![CDATA[<p>[[SAM]]</p><blockquote><p>So he wants to ask “how many consecutive substrings of $s$ are cyclical isomorphic to a given string $x$”. You are given string $s$ and $n$ strings $x_i$, for each string $x_i$ find, how many consecutive substrings of $s$ are cyclical isomorphic to $x_i$.</p></blockquote><p>Because I’ve learned suffix automaton, when I saw <a href="https://codeforces.com/contest/235/problem/C">this problem</a>, I knew I should use <a href="SAM.md">SAM</a>.</p><h2 id="Sol"><a href="#Sol" class="headerlink" title="Sol"></a>Sol</h2><p>First, consider an easier problem.</p><blockquote><p>How many times does a string $x$ occur in a string $s$ ?</p></blockquote><p>It’s a typical application of SAM.</p><p>What we need to do is just build a SAM on string $s$, then update the times every state occurs (by topo or dfs).<br>Then, we can read the query string $x$. Walk in the automaton by <code>ch</code> while iterating $x$.<br>Find the latest state included $x$. Finally, print the times of this state.</p><blockquote><p>How many consecutive substrings of $s$ are cyclical isomorphic to a given string $x$ ?</p></blockquote><p>Obviously, the complexity is the same. We should do operations in linear time.</p><p><strong>ADD to the rightmost and DELETE the leftmost.</strong></p><p>We can walk forwards by <code>ch</code> and walk backwards by <code>fa</code>.</p><p>If we have no way forwards, we turn back to find ways.<br>If we do that, the leftmost characters will be deleted.</p><p>If the length of current state reaches $|x|$, we must delete the leftmost character(this operation might make you walk back).</p><p>In addition, the times of every passible kinds of $x$ can only be added once.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> l(x) _[x].len</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> chp _[p].ch[c]</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fa(x) _[x].fa</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2000006</span>;</span><br><span class="line"><span class="type">int</span> t,n,p,np,la=<span class="number">1</span>,q,nq,T=<span class="number">1</span>,sz[N],l,ans,vis[N];</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>&#123;<span class="type">int</span> fa,ch[<span class="number">26</span>],len;&#125;_[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(p=la,la=np=++T,sz[np]=<span class="number">1</span>,<span class="built_in">l</span>(np)=<span class="built_in">l</span>(p)+<span class="number">1</span>;p&amp;&amp;!chp;p=<span class="built_in">fa</span>(p))chp=np;</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;<span class="built_in">fa</span>(np)=<span class="number">1</span>;<span class="keyword">return</span>;&#125;<span class="keyword">if</span>(<span class="built_in">l</span>(q=chp)==<span class="built_in">l</span>(p)+<span class="number">1</span>)&#123;<span class="built_in">fa</span>(np)=q;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(nq=++T,_[nq]=_[q],<span class="built_in">l</span>(nq)=<span class="built_in">l</span>(p)+<span class="number">1</span>,<span class="built_in">fa</span>(np)=<span class="built_in">fa</span>(q)=nq;p&amp;&amp;chp==q;p=<span class="built_in">fa</span>(p))chp=nq;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;e[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;<span class="keyword">for</span>(<span class="type">int</span> x:e[u])<span class="built_in">dfs</span>(x),sz[u]+=sz[x];&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>,cin&gt;&gt;s;s[i];i++)<span class="built_in">add</span>(s[i]-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=T;i++)e[<span class="built_in">fa</span>(i)].<span class="built_in">push_back</span>(i);<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(cin&gt;&gt;t,t++;--t;)&#123;</span><br><span class="line">cin&gt;&gt;s;n=<span class="built_in">strlen</span>(s);<span class="built_in">strcpy</span>(s+n,s);</span><br><span class="line"><span class="keyword">for</span>(ans=l=i=<span class="number">0</span>,p=<span class="number">1</span>;s[i];i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(;p&amp;&amp;!_[p].ch[s[i]-<span class="string">&#x27;a&#x27;</span>];)l=<span class="built_in">l</span>(p=<span class="built_in">fa</span>(p));</span><br><span class="line"><span class="keyword">if</span>(!p)&#123;<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);<span class="keyword">goto</span> E;&#125;</span><br><span class="line">l++,p=_[p].ch[s[i]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">l==n&amp;&amp;(vis[p]!=t&amp;&amp;(vis[p]=t,ans+=sz[p]),--l==<span class="built_in">l</span>(<span class="built_in">fa</span>(p))&amp;&amp;(p=<span class="built_in">fa</span>(p)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);E:;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*use topo</span></span><br><span class="line"><span class="comment">int deg[N],r,que[N],o;</span></span><br><span class="line"><span class="comment">void get_size()&#123;</span></span><br><span class="line"><span class="comment">for(int i=1;i&lt;=tot;i++)deg[fa(i)]++;</span></span><br><span class="line"><span class="comment">for(int i=1;i&lt;=tot;i++)if(!deg[i])que[r++]=i;</span></span><br><span class="line"><span class="comment">for(;l&lt;=r;l++)&#123;</span></span><br><span class="line"><span class="comment">o=que[l];</span></span><br><span class="line"><span class="comment">sz[fa(o)]+=sz[o];</span></span><br><span class="line"><span class="comment">if(!--deg[fa(o)])que[r++]=fa(o);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><p>This is the shortest solution code in CF.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/30/CF232D/"/>
      <url>/2022/05/30/CF232D/</url>
      
        <content type="html"><![CDATA[<p>[[discretization]] [[SA]] (suffix array) [[binary_search]] [[sweep_line]] [[BIT]] (Binary Indexed Tree)</p><p><a href="https://codeforces.com/contest/232/problem/D">link</a></p><p>OHHHHH OHHHH OHHHHHHHHH I made it!!!!</p><h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><p>Change the original sequence to a difference array(差分数组).</p><p>And the interval which is able to be matched is the same as the reversed(negative) inquiring interval in difference array.</p><p>We should find out all the interval able to be matched, so we can use suffix array.</p><p>To get the start positions of the inquiring interval, we can put the reversed sequence to the back of positive-going sequence, separated by inf.</p><p>Now, I can get all the intervals which meet the second and third conditions via binary search(once left, once right).</p><p>But, we don’t completely that (see the range of data).</p><p>How to deal with the intersect condition? <strong>offline</strong></p><p>We can make operations in $O(\log n)$ time.</p><p>Considering sweep line. </p><p>For each difference between two fences, only allowed to be calculated once.</p><p>We could solve it using BIT or segment tree or other structure that support queries of sum on an interval and increment(单点修改) of an element.</p><p>Cause this became a counting-nodes problem.</p><p>Pay attention to the gap near end pos, start pos, the add item and the subtract item.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">400005</span>;</span><br><span class="line"><span class="type">int</span> t,tot,n,nn,Q,m,r[N],d[N];</span><br><span class="line"><span class="type">int</span> t1[N],t2[N],sa[N],w[N],h[N],rk[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SA</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> *as=t1,*psa=t2,p,i,j,k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=m;i++)w[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)w[r[i]]++;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)w[i]+=w[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=n;i;i--)sa[w[as[i]=r[i]]--]=i;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;;j&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(p=<span class="number">0</span>,i=n+<span class="number">1</span>-j;i&lt;=n;i++)psa[++p]=i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(sa[i]&gt;j)psa[++p]=sa[i]-j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=m;i++)w[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)w[as[psa[i]]]++;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)w[i]+=w[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=n;i;i--)sa[w[as[psa[i]]]--]=psa[i];</span><br><span class="line"><span class="keyword">for</span>(m=psa[sa[<span class="number">1</span>]]=<span class="number">1</span>,i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">psa[sa[i]]=(as[sa[i]]==as[sa[i<span class="number">-1</span>]]&amp;&amp;as[sa[i]+j]==as[sa[i<span class="number">-1</span>]+j]?m:++m);</span><br><span class="line"><span class="keyword">if</span>(m==n)<span class="keyword">break</span>;<span class="built_in">swap</span>(as,psa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)rk[i]=psa[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>,k=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">j=sa[rk[i]<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(r[i+k]==r[j+k])k++;</span><br><span class="line">h[rk[i]]=k;<span class="keyword">if</span>(k&gt;<span class="number">0</span>)k--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[N&lt;&lt;<span class="number">1</span>][<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RMQ</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)f[i][<span class="number">0</span>]=h[i];</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">21</span>;j++)</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)</span><br><span class="line">f[i][j]=<span class="built_in">min</span>(f[i][j<span class="number">-1</span>],f[i+(<span class="number">1</span>&lt;&lt;j<span class="number">-1</span>)][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="type">int</span> len,x,y,_;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check1</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">ret=<span class="number">1000006</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">21</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(p+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=_)&#123;</span><br><span class="line">ret=<span class="built_in">min</span>(f[p][j],ret);</span><br><span class="line">p+=<span class="number">1</span>&lt;&lt;j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ret&lt;len)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check2</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">ret=<span class="number">1000006</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">21</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(p-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span>&gt;_)&#123;</span><br><span class="line">ret=<span class="built_in">min</span>(f[p-(<span class="number">1</span>&lt;&lt;j)+<span class="number">1</span>][j],ret);</span><br><span class="line">p-=<span class="number">1</span>&lt;&lt;j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ret&lt;len)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">NODE</span>&#123;</span><br><span class="line"><span class="type">int</span> id,x,y,p,o;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erf</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> l=<span class="number">2</span>,r=_,mid;<span class="comment">//&lt;---2</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check1</span>(mid))r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">q[tot].o=<span class="number">-1</span>;</span><br><span class="line">q[tot].p=r<span class="number">-1</span>;</span><br><span class="line">l=_+<span class="number">1</span>,r=n;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check2</span>(mid))r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">q[tot+<span class="number">1</span>].o=<span class="number">1</span>;</span><br><span class="line">q[tot+<span class="number">1</span>].p=r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> bi[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;p&lt;=nn;p+=p&amp;-p)bi[p]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">down</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(ret=<span class="number">0</span>;p;p-=p&amp;-p)ret+=bi[p];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[N],cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;r[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">d[i]=r[i+<span class="number">1</span>]-r[i],</span><br><span class="line">d[i+n]=-d[i];</span><br><span class="line">&#125;d[n]=<span class="number">1e9</span>;</span><br><span class="line">nn=n;n=n*<span class="number">2</span><span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)r[i]=d[i];</span><br><span class="line"><span class="built_in">sort</span>(d+<span class="number">1</span>,d+<span class="number">1</span>+n);</span><br><span class="line">m=<span class="built_in">unique</span>(d+<span class="number">1</span>,d+<span class="number">1</span>+n)-d;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)r[i]=<span class="built_in">lower_bound</span>(d+<span class="number">1</span>,d+m,r[i])-d;m=n;</span><br><span class="line"><span class="built_in">SA</span>();<span class="built_in">RMQ</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Q);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=Q;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">ans[i]=nn<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">len=y-x;_=rk[x+nn];<span class="built_in">erf</span>();</span><br><span class="line">q[tot].x=q[tot+<span class="number">1</span>].x=<span class="built_in">max</span>(x<span class="number">-1</span>-len,<span class="number">0</span>);</span><br><span class="line">q[tot].y=q[tot+<span class="number">1</span>].y=y;</span><br><span class="line">q[tot].id=q[tot+<span class="number">1</span>].id=i;</span><br><span class="line">tot+=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(q,q+tot,[](NODE a,NODE b)&#123;</span><br><span class="line"><span class="keyword">return</span> a.p&lt;b.p;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)&#123;<span class="comment">//&lt;---0</span></span><br><span class="line"><span class="keyword">if</span>(sa[i]&lt;=nn&amp;&amp;sa[i]&gt;=<span class="number">1</span>)<span class="built_in">up</span>(sa[i]),cnt++;</span><br><span class="line"><span class="keyword">for</span>(;q[t].p==i&amp;&amp;t&lt;tot;t++)</span><br><span class="line">ans[q[t].id]+=q[t].o*(cnt-<span class="built_in">down</span>(q[t].y)+<span class="built_in">down</span>(q[t].x));</span><br><span class="line"><span class="keyword">if</span>(t&gt;=tot)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=Q;i++)<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>There is another way to implement the function <code>LCP</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCP</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="comment">//the LCP between two suffixes, ranked x and y in the suffix array.</span></span><br><span class="line"><span class="keyword">if</span>(x&gt;y)<span class="built_in">swap</span>(x,y);x++;</span><br><span class="line"><span class="type">int</span> k=LG[y-x+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(st[x][k],st[y-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/29/hello-world/"/>
      <url>/2022/05/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
